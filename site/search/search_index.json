{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bamboo Documentation","text":"<p>Welcome to the official Bamboo documentation hub. This site collects the installation guides, framework reference material, task automation playbooks, and roadmaps that keep the Bamboo microframework and its starter templates aligned.</p> <p>Use the navigation to explore:</p> <ul> <li>Installation walkthroughs for supported PHP runtimes and OpenSwoole.</li> <li>The Framework Guide covering routing, module lifecycles, and   configuration schemas.</li> <li>CLI command references and JWT tooling notes for day-to-day operations.</li> <li>Operational Tasks such as configuration validation, benchmarking, and   handling deprecations during upgrades.</li> <li>Starters and Benchmarks documentation for project templates and   performance tooling.</li> <li>The long-term Roadmap and Upgrade guides that describe upcoming work   and how to adopt new Bamboo releases.</li> </ul> <p>If you maintain custom starters or deployment tooling, remember to update the navigation (<code>mkdocs.yml</code>) when new documents are added so MkDocs can surface them in the published site.</p>"},{"location":"Install-Bamboo-PHP82/","title":"Bamboo on PHP 8.2 \u2014 Installation &amp; Configuration Guide","text":"<p>This guide covers a complete Bamboo v0.2 setup on PHP 8.2 using the OpenSwoole runtime. The walkthrough assumes an Ubuntu/Debian host but also calls out the required changes for macOS and other Linux distributions. Follow each section to prepare the CLI, HTTP server, Redis queue worker, and optional database integration.</p>"},{"location":"Install-Bamboo-PHP82/#1-prerequisites","title":"1. Prerequisites","text":"Requirement Notes 64-bit Linux (Ubuntu 22.04+, Debian 12+) or macOS 13+ Bamboo is primarily validated on Linux. macOS works for development but needs Homebrew-managed services. PHP 8.2 CLI &amp; FPM Install the PHP 8.2 runtime plus development headers so OpenSwoole can compile. Composer 2.5+ Required to install PHP dependencies. Git 2.30+ Used to clone the repository. Redis 6+ Supplies the queue backend for <code>queue.work</code>. MySQL 8+, MariaDB 10.6+, or SQLite Optional unless you enable the database layer. Build toolchain <code>build-essential</code>, <code>pkg-config</code>, <code>libssl-dev</code>, and <code>zlib1g-dev</code> are necessary to build OpenSwoole. <p>Tip: Use a shell with sudo privileges. On macOS replace <code>apt</code> commands with their Homebrew equivalents (<code>brew install ...</code>).</p>"},{"location":"Install-Bamboo-PHP82/#2-install-php-82-and-extensions","title":"2. Install PHP 8.2 and extensions","text":""},{"location":"Install-Bamboo-PHP82/#21-ubuntudebian","title":"2.1 Ubuntu/Debian","text":"<pre><code># Enable the maintained PHP packaging repository (if you do not already use it)\nsudo add-apt-repository ppa:ondrej/php -y\nsudo apt update\n\n# Install PHP 8.2 and required extensions\nsudo apt install -y \\\n  php8.2 php8.2-cli php8.2-fpm php8.2-common php8.2-dev \\\n  php8.2-curl php8.2-mbstring php8.2-xml php8.2-zip php8.2-intl \\\n  php8.2-sqlite3 php8.2-mysql php8.2-pgsql php8.2-redis php8.2-gd\n\n# Ensure the PHP 8.2 CLI is the default on your PATH\nsudo update-alternatives --set php /usr/bin/php8.2\n</code></pre> <p>The <code>php8.2-dev</code> package delivers <code>php-config8.2</code>, which OpenSwoole needs while building. The remaining extensions match Bamboo's dependencies (<code>curl</code>, <code>mbstring</code>, <code>pdo_*</code>, <code>intl</code>, <code>redis</code>, etc.).</p>"},{"location":"Install-Bamboo-PHP82/#22-macos-homebrew","title":"2.2 macOS (Homebrew)","text":"<pre><code>brew update\nbrew install php@8.2 composer redis mysql\nbrew services start redis\nbrew services start mysql\n</code></pre> <p>Add the PHP binary to your path if Homebrew does not do this automatically:</p> <pre><code>echo 'export PATH=\"/opt/homebrew/opt/php@8.2/bin:$PATH\"' &gt;&gt; ~/.zshrc\nsource ~/.zshrc\n</code></pre>"},{"location":"Install-Bamboo-PHP82/#3-install-build-dependencies-and-openswoole","title":"3. Install build dependencies and OpenSwoole","text":"<p>OpenSwoole is the coroutine HTTP server that powers Bamboo. It must be compiled against PHP 8.2.</p> <pre><code># Toolchain &amp; headers (Ubuntu/Debian)\nsudo apt install -y build-essential autoconf pkg-config libssl-dev zlib1g-dev libcurl4-openssl-dev\n\n# Optional: remove old OpenSwoole builds if you previously installed for PHP 8.1\nsudo rm -f \"$(php -i | grep '^extension_dir' | awk '{print $3}')/openswoole.so\"\n\n# Install through PECL (works on Linux and macOS)\nprintf \"\\n\" | sudo pecl install openswoole\n</code></pre> <p>When prompted, accept the defaults or enable features you require:</p> <ul> <li><code>--enable-openssl</code> (recommended for HTTPS).</li> <li><code>--enable-swoole-curl</code> (keeps coroutine HTTP functionality).</li> <li><code>--enable-swoole-json</code> (required for JSON helpers).</li> </ul> <p>Register the extension:</p> <pre><code>echo \"extension=openswoole\" | sudo tee /etc/php/8.2/mods-available/openswoole.ini\nsudo phpenmod openswoole\n</code></pre> <p>Verify the setup:</p> <pre><code>php -v\nphp -m | grep openswoole\nphp --ri openswoole\n</code></pre> <p>All commands should report PHP 8.2 and a loaded OpenSwoole module.</p>"},{"location":"Install-Bamboo-PHP82/#4-install-composer-and-project-dependencies","title":"4. Install Composer and project dependencies","text":"<p>If Composer is not already available:</p> <pre><code>php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"\nphp composer-setup.php --install-dir=/usr/local/bin --filename=composer\nrm composer-setup.php\n</code></pre> <p>Clone the Bamboo repository and install PHP packages:</p> <pre><code>cd /opt # or any working directory you prefer\nsudo git clone https://github.com/greenarmor/bamboo.git\ncd bamboo\ncomposer install\n</code></pre> <p>Composer pulls all runtime dependencies defined in <code>composer.json</code>, such as FastRoute, Nyholm PSR-7, Guzzle, Predis, Illuminate Database, and Monolog.</p>"},{"location":"Install-Bamboo-PHP82/#5-project-configuration","title":"5. Project configuration","text":"<ol> <li> <p>Copy the environment template and generate the application key:    <pre><code>cp .env.example .env\nphp bin/bamboo app.key.make\n</code></pre>    The key is stored in <code>.env</code> and powers encryption helpers.</p> </li> <li> <p>Review the <code>.env</code> file:</p> </li> <li>HTTP server: <code>HTTP_HOST</code>, <code>HTTP_PORT</code>, <code>HTTP_WORKERS</code>, <code>TASK_WORKERS</code>, <code>MAX_REQUESTS</code>, <code>STATIC_ENABLED</code>.</li> <li>Redis: <code>REDIS_URL</code> (e.g., <code>tcp://127.0.0.1:6379</code>) and <code>REDIS_QUEUE</code>.</li> <li>Database: Set <code>DB_CONNECTION</code>, <code>DB_HOST</code>, <code>DB_PORT</code>, <code>DB_DATABASE</code>, <code>DB_USERNAME</code>, and <code>DB_PASSWORD</code> if you use Eloquent.</li> <li>WebSocket: <code>WS_HOST</code> and <code>WS_PORT</code>.</li> <li> <p>Logging: <code>LOG_FILE</code> defaults to <code>var/log/app.log</code>; adjust if your runtime uses a different writable path.</p> </li> <li> <p>Prepare runtime directories and permissions:    <pre><code>mkdir -p var/cache var/log\nsudo chown -R $USER:$USER var\nsudo chmod -R 775 var\n</code></pre>    The cache directory stores route caches and other runtime artifacts, while the log directory receives application logs.</p> </li> <li> <p>Understand the configuration files in <code>etc/</code>:</p> </li> <li><code>etc/app.php</code> reads core app settings (<code>APP_NAME</code>, <code>APP_ENV</code>, <code>APP_DEBUG</code>, <code>APP_KEY</code>, <code>LOG_FILE</code>).</li> <li><code>etc/server.php</code> maps <code>.env</code> values to OpenSwoole server options (workers, task workers, static files).</li> <li><code>etc/cache.php</code> controls where cache artifacts are stored.</li> <li><code>etc/http.php</code> defines default timeouts, headers, and retry policies for the bundled PSR-18 HTTP client along with service overrides.</li> <li><code>etc/redis.php</code> and <code>etc/ws.php</code> configure the Redis queue connection and WebSocket server endpoint.</li> <li><code>etc/database.php</code> defines database connections for the optional Eloquent ORM integration.</li> </ol> <p>Update these files if you need to commit environment-specific defaults to source control; otherwise rely on <code>.env</code> overrides for per-host customization.</p>"},{"location":"Install-Bamboo-PHP82/#6-supporting-services","title":"6. Supporting services","text":"<ul> <li> <p>Redis: Install and start Redis so the queue worker can connect.   <pre><code>sudo apt install -y redis-server\nsudo systemctl enable --now redis-server\n</code></pre></p> </li> <li> <p>Database (optional): Install MySQL or MariaDB if you plan to use Eloquent.   <pre><code>sudo apt install -y mysql-server\nsudo mysql_secure_installation\n</code></pre>   Update <code>.env</code> with your credentials. For SQLite, point <code>DB_DATABASE</code> to an absolute file path and ensure the containing directory is writable.</p> </li> <li> <p>Supervisor/systemd (optional): To run Bamboo as a daemon, create a systemd unit invoking <code>php /path/to/bamboo/bin/bamboo http.serve</code>. Ensure the service account has permissions to the project directory.</p> </li> </ul>"},{"location":"Install-Bamboo-PHP82/#7-running-bamboo","title":"7. Running Bamboo","text":"<p>Start the OpenSwoole HTTP server:</p> <pre><code>php bin/bamboo http.serve\n</code></pre> <p>Open <code>http://127.0.0.1:9501</code> in a browser to confirm the welcome JSON. Other useful commands:</p> <pre><code>php bin/bamboo routes.show   # Inspect registered routes\nphp bin/bamboo queue.work    # Start the Redis-backed queue worker\nphp bin/bamboo ws.serve      # Start the WebSocket echo server\nphp bin/bamboo client.call --url=https://httpbin.org/get\n</code></pre> <p>For hot reloading during development, keep <code>dev.watch</code> running in another terminal. It watches source changes and restarts the server automatically.</p>"},{"location":"Install-Bamboo-PHP82/#8-troubleshooting-checklist","title":"8. Troubleshooting checklist","text":"Symptom Resolution <code>PHP Warning:  Module \"openswoole\" is already loaded</code> Remove duplicate <code>extension=openswoole</code> lines from <code>php.ini</code> or <code>/etc/php/8.2/mods-available/openswoole.ini</code>. <code>undefined symbol: php_json_encode</code> on startup Rebuild OpenSwoole with <code>--enable-swoole-json</code> against PHP 8.2. <code>Class \"Redis\" not found</code> or inability to enqueue jobs Ensure <code>php8.2-redis</code> or the <code>redis</code> PECL extension is installed/enabled; check <code>php -m</code>. HTTP server exits immediately Verify that port 9501 is free and that the user has permission to bind to it. Check logs in <code>var/log/app.log</code>. <code>APP_KEY</code> empty warning Run <code>php bin/bamboo app.key.make</code> again to populate the key. OpenSwoole fails to build (<code>fatal error: openssl/...</code>) Install <code>libssl-dev</code> and <code>pkg-config</code> before running <code>pecl install openswoole</code>. <p>See <code>docs/OpenSwoole-Compat-and-Fixes.md</code> for more OpenSwoole tips.</p>"},{"location":"Install-Bamboo-PHP82/#9-next-steps","title":"9. Next steps","text":"<ul> <li>Commit your <code>.env</code> overrides to a <code>.env.local</code> (or similar) file outside version control.</li> <li>Configure CI/CD runners with the same PHP 8.2 + OpenSwoole toolchain so deployments match local development.</li> <li>Explore the roadmap and CLI capabilities in the README.</li> </ul> <p>Bamboo should now be fully operational on PHP 8.2.</p>"},{"location":"Install-Bamboo-PHP83/","title":"Bamboo on PHP 8.3 \u2014 Installation &amp; Configuration Guide","text":"<p>This guide explains how to install and configure Bamboo v0.2 on PHP 8.3 with the OpenSwoole runtime. It targets Ubuntu/Debian systems but also documents the macOS/Homebrew equivalents. Follow the steps to bring up the CLI, OpenSwoole HTTP server, Redis queue worker, and optional database layer.</p>"},{"location":"Install-Bamboo-PHP83/#1-prerequisites","title":"1. Prerequisites","text":"Requirement Notes 64-bit Linux (Ubuntu 22.04+, Debian 12+) or macOS 13+ Bamboo is primarily validated on Linux. macOS works for development but needs Homebrew services. PHP 8.3 CLI &amp; FPM Install the PHP 8.3 runtime plus development headers so OpenSwoole can compile. Composer 2.5+ Required to install PHP dependencies. Git 2.30+ Used to clone the repository. Redis 6+ Supplies the queue backend for <code>queue.work</code>. MySQL 8+, MariaDB 10.6+, or SQLite Optional unless you enable the database layer. Build toolchain <code>build-essential</code>, <code>pkg-config</code>, <code>libssl-dev</code>, and <code>zlib1g-dev</code> are necessary to build OpenSwoole. <p>Tip: Work from a shell session with sudo privileges. On macOS switch <code>apt</code> commands to Homebrew equivalents (<code>brew install ...</code>).</p>"},{"location":"Install-Bamboo-PHP83/#2-install-php-83-and-extensions","title":"2. Install PHP 8.3 and extensions","text":""},{"location":"Install-Bamboo-PHP83/#21-ubuntudebian","title":"2.1 Ubuntu/Debian","text":"<pre><code># Enable the maintained PHP packaging repository (if you do not already use it)\nsudo add-apt-repository ppa:ondrej/php -y\nsudo apt update\n\n# Install PHP 8.3 and required extensions\nsudo apt install -y \\\n  php8.3 php8.3-cli php8.3-fpm php8.3-common php8.3-dev \\\n  php8.3-curl php8.3-mbstring php8.3-xml php8.3-zip php8.3-intl \\\n  php8.3-sqlite3 php8.3-mysql php8.3-pgsql php8.3-redis php8.3-gd\n\n# Ensure the PHP 8.3 CLI is the default on your PATH\nsudo update-alternatives --set php /usr/bin/php8.3\n</code></pre> <p>The <code>php8.3-dev</code> package ships <code>php-config8.3</code>, which OpenSwoole needs for compilation. The other extensions mirror what Bamboo and its dependencies expect (<code>curl</code>, <code>mbstring</code>, <code>pdo_*</code>, <code>intl</code>, <code>redis</code>, etc.).</p>"},{"location":"Install-Bamboo-PHP83/#22-macos-homebrew","title":"2.2 macOS (Homebrew)","text":"<pre><code>brew update\nbrew install php@8.3 composer redis mysql\nbrew services start redis\nbrew services start mysql\n</code></pre> <p>Add the PHP binary to your path if Homebrew does not do this automatically:</p> <pre><code>echo 'export PATH=\"/opt/homebrew/opt/php@8.3/bin:$PATH\"' &gt;&gt; ~/.zshrc\nsource ~/.zshrc\n</code></pre>"},{"location":"Install-Bamboo-PHP83/#3-install-build-dependencies-and-openswoole","title":"3. Install build dependencies and OpenSwoole","text":"<p>OpenSwoole is the coroutine HTTP server that powers Bamboo. It must be compiled against PHP 8.3.</p> <pre><code># Toolchain &amp; headers (Ubuntu/Debian)\nsudo apt install -y build-essential autoconf pkg-config libssl-dev zlib1g-dev libcurl4-openssl-dev\n\n# Optional: remove old OpenSwoole builds if you previously installed for PHP 8.2\nsudo rm -f \"$(php -i | grep '^extension_dir' | awk '{print $3}')/openswoole.so\"\n\n# Install through PECL (works on Linux and macOS)\nprintf \"\\n\" | sudo pecl install openswoole\n</code></pre> <p>When prompted, accept the defaults or enable features you require:</p> <ul> <li><code>--enable-openssl</code> (recommended for HTTPS).</li> <li><code>--enable-swoole-curl</code> (keeps coroutine HTTP functionality).</li> <li><code>--enable-swoole-json</code> (required for JSON helpers).</li> </ul> <p>Register the extension:</p> <pre><code>echo \"extension=openswoole\" | sudo tee /etc/php/8.3/mods-available/openswoole.ini\nsudo phpenmod openswoole\n</code></pre> <p>Verify the setup:</p> <pre><code>php -v\nphp -m | grep openswoole\nphp --ri openswoole\n</code></pre> <p>All commands should report PHP 8.3 and a loaded OpenSwoole module.</p>"},{"location":"Install-Bamboo-PHP83/#4-install-composer-and-project-dependencies","title":"4. Install Composer and project dependencies","text":"<p>If Composer is not already installed:</p> <pre><code>php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"\nphp composer-setup.php --install-dir=/usr/local/bin --filename=composer\nrm composer-setup.php\n</code></pre> <p>Clone the Bamboo repository and install PHP packages:</p> <pre><code>cd /opt # or any working directory you prefer\nsudo git clone https://github.com/greenarmor/bamboo.git\ncd bamboo\ncomposer install\n</code></pre> <p>Composer installs the runtime dependencies defined in <code>composer.json</code> such as FastRoute, Nyholm PSR-7, Guzzle, Predis, Illuminate Database, and Monolog.</p>"},{"location":"Install-Bamboo-PHP83/#5-project-configuration","title":"5. Project configuration","text":"<ol> <li> <p>Copy the environment template and generate the application key:    <pre><code>cp .env.example .env\nphp bin/bamboo app.key.make\n</code></pre>    The key is stored in <code>.env</code> and powers encryption helpers.</p> </li> <li> <p>Review the <code>.env</code> file:</p> </li> <li>HTTP server: <code>HTTP_HOST</code>, <code>HTTP_PORT</code>, <code>HTTP_WORKERS</code>, <code>TASK_WORKERS</code>, <code>MAX_REQUESTS</code>, <code>STATIC_ENABLED</code>.</li> <li>Redis: <code>REDIS_URL</code> (e.g., <code>tcp://127.0.0.1:6379</code>) and <code>REDIS_QUEUE</code>.</li> <li>Database: Set <code>DB_CONNECTION</code>, <code>DB_HOST</code>, <code>DB_PORT</code>, <code>DB_DATABASE</code>, <code>DB_USERNAME</code>, and <code>DB_PASSWORD</code> if you use Eloquent.</li> <li>WebSocket: <code>WS_HOST</code> and <code>WS_PORT</code>.</li> <li> <p>Logging: <code>LOG_FILE</code> defaults to <code>var/log/app.log</code>; change it if your runtime uses a different writable path.</p> </li> <li> <p>Prepare runtime directories and permissions:    <pre><code>mkdir -p var/cache var/log\nsudo chown -R $USER:$USER var\nsudo chmod -R 775 var\n</code></pre>    The cache directory stores route caches and other runtime artifacts, while the log directory receives application logs.</p> </li> <li> <p>Understand the configuration files in <code>etc/</code>:</p> </li> <li><code>etc/app.php</code> reads core app settings (<code>APP_NAME</code>, <code>APP_ENV</code>, <code>APP_DEBUG</code>, <code>APP_KEY</code>, <code>LOG_FILE</code>).</li> <li><code>etc/server.php</code> maps <code>.env</code> values to OpenSwoole server options (workers, task workers, static files).</li> <li><code>etc/cache.php</code> controls where cache artifacts are stored.</li> <li><code>etc/http.php</code> defines default timeouts, headers, and retry policies for the bundled PSR-18 HTTP client along with service overrides.</li> <li><code>etc/redis.php</code> and <code>etc/ws.php</code> configure the Redis queue connection and WebSocket server endpoint.</li> <li><code>etc/database.php</code> defines database connections for the optional Eloquent ORM integration.</li> </ol> <p>Update these files if you need to commit environment-specific defaults; otherwise rely on <code>.env</code> overrides for per-host customization.</p>"},{"location":"Install-Bamboo-PHP83/#6-supporting-services","title":"6. Supporting services","text":"<ul> <li> <p>Redis: Install and start Redis so the queue worker can connect.   <pre><code>sudo apt install -y redis-server\nsudo systemctl enable --now redis-server\n</code></pre></p> </li> <li> <p>Database (optional): Install MySQL or MariaDB if you plan to use Eloquent.   <pre><code>sudo apt install -y mysql-server\nsudo mysql_secure_installation\n</code></pre>   Update <code>.env</code> with your credentials. For SQLite, point <code>DB_DATABASE</code> to an absolute file path and ensure the containing directory is writable.</p> </li> <li> <p>Supervisor/systemd (optional): To run Bamboo as a daemon, create a systemd unit invoking <code>php /path/to/bamboo/bin/bamboo http.serve</code>. Ensure the service account has permissions to the project directory.</p> </li> </ul>"},{"location":"Install-Bamboo-PHP83/#7-running-bamboo","title":"7. Running Bamboo","text":"<p>Start the OpenSwoole HTTP server:</p> <pre><code>php bin/bamboo http.serve\n</code></pre> <p>Open <code>http://127.0.0.1:9501</code> in a browser to confirm the welcome JSON. Other useful commands:</p> <pre><code>php bin/bamboo routes.show   # Inspect registered routes\nphp bin/bamboo queue.work    # Start the Redis-backed queue worker\nphp bin/bamboo ws.serve      # Start the WebSocket echo server\nphp bin/bamboo client.call --url=https://httpbin.org/get\n</code></pre> <p>For hot reloading during development, keep <code>dev.watch</code> running in another terminal. It watches source changes and restarts the server automatically.</p>"},{"location":"Install-Bamboo-PHP83/#8-troubleshooting-checklist","title":"8. Troubleshooting checklist","text":"Symptom Resolution <code>PHP Warning:  Module \"openswoole\" is already loaded</code> Remove duplicate <code>extension=openswoole</code> lines from <code>php.ini</code> or <code>/etc/php/8.3/mods-available/openswoole.ini</code>. <code>undefined symbol: php_json_encode</code> on startup Rebuild OpenSwoole with <code>--enable-swoole-json</code> against PHP 8.3. <code>Class \"Redis\" not found</code> or inability to enqueue jobs Ensure <code>php8.3-redis</code> or the <code>redis</code> PECL extension is installed/enabled; check <code>php -m</code>. HTTP server exits immediately Verify that port 9501 is free and that the user has permission to bind to it. Check logs in <code>var/log/app.log</code>. <code>APP_KEY</code> empty warning Run <code>php bin/bamboo app.key.make</code> again to populate the key. OpenSwoole fails to build (<code>fatal error: openssl/...</code>) Install <code>libssl-dev</code> and <code>pkg-config</code> before running <code>pecl install openswoole</code>. <p>Consult <code>docs/OpenSwoole-Compat-and-Fixes.md</code> for additional OpenSwoole notes.</p>"},{"location":"Install-Bamboo-PHP83/#9-next-steps","title":"9. Next steps","text":"<ul> <li>Commit your <code>.env</code> overrides to a <code>.env.local</code> (or similar) file outside version control.</li> <li>Configure CI/CD runners with the same PHP 8.3 + OpenSwoole toolchain so deployments match local development.</li> <li>Explore the roadmap and CLI capabilities in the README.</li> </ul> <p>Bamboo should now be fully operational on PHP 8.3.</p>"},{"location":"Install-Bamboo-PHP84/","title":"Bamboo on PHP 8.4 \u2014 Installation &amp; Configuration Guide","text":"<p>This guide walks through a full Bamboo v0.2 installation on PHP 8.4 with the OpenSwoole runtime. It targets Ubuntu/Debian hosts but calls out the adjustments needed for macOS and other Linux distributions. Follow every step to ensure the CLI, HTTP server, Redis-backed queues, and optional database integration all function correctly.</p>"},{"location":"Install-Bamboo-PHP84/#1-prerequisites","title":"1. Prerequisites","text":"Requirement Notes 64-bit Linux (Ubuntu 22.04+, Debian 12+) or macOS 14+ Bamboo is tested primarily on Linux. macOS works for development but requires Homebrew-installed services. PHP 8.4 CLI &amp; FPM Bamboo requires the PHP 8.4 runtime and development headers so that OpenSwoole can be compiled against it. Composer 2.5+ Needed to install PHP dependencies. Git 2.30+ Used to clone the repository. Redis 6+ Provides the queue backend (required for queue.work demos). MySQL 8+, MariaDB 10.6+, or SQLite Optional but required if you enable the database layer. Build toolchain <code>build-essential</code>, <code>pkg-config</code>, <code>libssl-dev</code>, and <code>zlib1g-dev</code> are required for compiling OpenSwoole. <p>Tip: Run everything from a shell session with sudo privileges. If you are on macOS, replace <code>apt</code> commands with their Homebrew equivalents (<code>brew install ...</code>).</p>"},{"location":"Install-Bamboo-PHP84/#2-install-php-84-and-extensions","title":"2. Install PHP 8.4 and extensions","text":""},{"location":"Install-Bamboo-PHP84/#21-ubuntudebian","title":"2.1 Ubuntu/Debian","text":"<pre><code># Enable the maintained PHP packaging repository (if you do not already use it)\nsudo add-apt-repository ppa:ondrej/php -y\nsudo apt update\n\n# Install PHP 8.4 and required extensions\nsudo apt install -y \\\n  php8.4 php8.4-cli php8.4-fpm php8.4-common php8.4-dev \\\n  php8.4-curl php8.4-mbstring php8.4-xml php8.4-zip php8.4-intl \\\n  php8.4-sqlite3 php8.4-mysql php8.4-pgsql php8.4-redis php8.4-gd\n\n# Ensure the PHP 8.4 CLI is the default on your PATH\nsudo update-alternatives --set php /usr/bin/php8.4\n</code></pre> <p>The <code>php8.4-dev</code> package provides <code>php-config8.4</code>, which OpenSwoole requires. The other extensions align with the features that Bamboo and its dependencies expect (<code>curl</code>, <code>mbstring</code>, <code>pdo_*</code>, <code>intl</code>, <code>redis</code>, etc.).</p>"},{"location":"Install-Bamboo-PHP84/#22-macos-homebrew","title":"2.2 macOS (Homebrew)","text":"<pre><code>brew update\nbrew install php@8.4 composer redis mysql\nbrew services start redis\nbrew services start mysql\n</code></pre> <p>Add the PHP binary to your path if Homebrew does not do this automatically:</p> <pre><code>echo 'export PATH=\"/opt/homebrew/opt/php@8.4/bin:$PATH\"' &gt;&gt; ~/.zshrc\nsource ~/.zshrc\n</code></pre>"},{"location":"Install-Bamboo-PHP84/#3-install-build-dependencies-and-openswoole","title":"3. Install build dependencies and OpenSwoole","text":"<p>OpenSwoole is the coroutine HTTP server that powers Bamboo. It must be compiled against PHP 8.4.</p> <pre><code># Toolchain &amp; headers (Ubuntu/Debian)\nsudo apt install -y build-essential autoconf pkg-config libssl-dev zlib1g-dev libcurl4-openssl-dev\n\n# Optional: remove old OpenSwoole builds if you previously installed for PHP 8.3\nsudo rm -f \"$(php -i | grep '^extension_dir' | awk '{print $3}')/openswoole.so\"\n\n# Install through PECL (works on Linux and macOS)\nprintf \"\\n\" | sudo pecl install openswoole\n</code></pre> <p>When the PECL installer prompts for enabling additional features, accept the defaults or enable the ones you need:</p> <ul> <li><code>--enable-openssl</code> (recommended for HTTPS).</li> <li><code>--enable-swoole-curl</code> (keeps coroutine HTTP functionality).</li> <li><code>--enable-swoole-json</code> (required for JSON helpers).</li> </ul> <p>Finally, register the extension:</p> <pre><code>echo \"extension=openswoole\" | sudo tee /etc/php/8.4/mods-available/openswoole.ini\nsudo phpenmod openswoole\n</code></pre> <p>Verify the setup:</p> <pre><code>php -v\nphp -m | grep openswoole\nphp --ri openswoole\n</code></pre> <p>All commands should report PHP 8.4 and a loaded OpenSwoole module.</p>"},{"location":"Install-Bamboo-PHP84/#4-install-composer-and-project-dependencies","title":"4. Install Composer and project dependencies","text":"<p>If Composer is not already available:</p> <pre><code>php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"\nphp composer-setup.php --install-dir=/usr/local/bin --filename=composer\nrm composer-setup.php\n</code></pre> <p>Clone the Bamboo repository and install PHP packages:</p> <pre><code>cd /opt # or any working directory you prefer\nsudo git clone https://github.com/greenarmor/bamboo.git\ncd bamboo\ncomposer install\n</code></pre> <p>Composer will pull in all runtime dependencies declared in <code>composer.json</code> such as FastRoute, Nyholm PSR-7, Guzzle, Predis, Illuminate Database, and Monolog.</p>"},{"location":"Install-Bamboo-PHP84/#5-project-configuration","title":"5. Project configuration","text":"<ol> <li> <p>Copy the environment template and generate the application key:    <pre><code>cp .env.example .env\nphp bin/bamboo app.key.make\n</code></pre>    The key is stored in <code>.env</code> and used for encryption helpers.</p> </li> <li> <p>Review the <code>.env</code> file:</p> </li> <li>HTTP server: <code>HTTP_HOST</code>, <code>HTTP_PORT</code>, <code>HTTP_WORKERS</code>, <code>TASK_WORKERS</code>, <code>MAX_REQUESTS</code>, <code>STATIC_ENABLED</code>.</li> <li>Redis: <code>REDIS_URL</code> (e.g., <code>tcp://127.0.0.1:6379</code>) and <code>REDIS_QUEUE</code>.</li> <li>Database: Set <code>DB_CONNECTION</code>, <code>DB_HOST</code>, <code>DB_PORT</code>, <code>DB_DATABASE</code>, <code>DB_USERNAME</code>, and <code>DB_PASSWORD</code> if you use Eloquent.</li> <li>WebSocket: <code>WS_HOST</code> and <code>WS_PORT</code>.</li> <li> <p>Logging: <code>LOG_FILE</code> defaults to <code>var/log/app.log</code>; change it if your runtime uses a different writable path.</p> </li> <li> <p>Prepare runtime directories and permissions:    <pre><code>mkdir -p var/cache var/log\nsudo chown -R $USER:$USER var\nsudo chmod -R 775 var\n</code></pre>    The cache directory stores route caches and other runtime artifacts, while the log directory receives application logs.</p> </li> <li> <p>Understand the configuration files in <code>etc/</code>:</p> </li> <li><code>etc/app.php</code> reads core app settings (<code>APP_NAME</code>, <code>APP_ENV</code>, <code>APP_DEBUG</code>, <code>APP_KEY</code>, <code>LOG_FILE</code>).</li> <li><code>etc/server.php</code> maps <code>.env</code> values to OpenSwoole server options (workers, task workers, static files).</li> <li><code>etc/cache.php</code> controls where cache artifacts are saved.</li> <li><code>etc/http.php</code> defines default timeouts, headers, and retry policies for the bundled PSR-18 HTTP client along with service overrides.</li> <li><code>etc/redis.php</code> and <code>etc/ws.php</code> configure the Redis queue connection and WebSocket server endpoint.</li> <li><code>etc/database.php</code> defines database connections for the optional Eloquent ORM integration.</li> </ol> <p>Update these files if you need to commit environment-specific defaults to source control; otherwise rely on <code>.env</code> overrides for per-host customization.</p>"},{"location":"Install-Bamboo-PHP84/#6-supporting-services","title":"6. Supporting services","text":"<ul> <li> <p>Redis: Install and start Redis so the queue worker can connect.   <pre><code>sudo apt install -y redis-server\nsudo systemctl enable --now redis-server\n</code></pre></p> </li> <li> <p>Database (optional): Install MySQL or MariaDB if you plan to use Eloquent.   <pre><code>sudo apt install -y mysql-server\nsudo mysql_secure_installation\n</code></pre>   Adjust <code>.env</code> with your credentials. For SQLite, point <code>DB_DATABASE</code> to an absolute file path and ensure the containing directory is writable.</p> </li> <li> <p>Supervisor/systemd (optional): To run Bamboo as a daemon, create a systemd unit invoking <code>php /path/to/bamboo/bin/bamboo http.serve</code>. Ensure the service account has permissions to the project directory.</p> </li> </ul>"},{"location":"Install-Bamboo-PHP84/#7-running-bamboo","title":"7. Running Bamboo","text":"<p>Start the OpenSwoole HTTP server:</p> <pre><code>php bin/bamboo http.serve\n</code></pre> <p>Open <code>http://127.0.0.1:9501</code> in a browser to confirm the welcome JSON. For other core commands:</p> <pre><code>php bin/bamboo routes.show   # Inspect registered routes\nphp bin/bamboo queue.work    # Start the Redis-backed queue worker\nphp bin/bamboo ws.serve      # Start the WebSocket echo server\nphp bin/bamboo client.call --url=https://httpbin.org/get\n</code></pre> <p>If you want hot reloading during development, keep <code>dev.watch</code> running in another terminal. It watches source changes and restarts the server automatically.</p>"},{"location":"Install-Bamboo-PHP84/#8-troubleshooting-checklist","title":"8. Troubleshooting checklist","text":"Symptom Resolution <code>PHP Warning:  Module \"openswoole\" is already loaded</code> Remove duplicate <code>extension=openswoole</code> lines from <code>php.ini</code> or <code>/etc/php/8.4/mods-available/openswoole.ini</code>. <code>undefined symbol: php_json_encode</code> on startup Rebuild OpenSwoole with <code>--enable-swoole-json</code> against PHP 8.4. <code>Class \"Redis\" not found</code> or inability to enqueue jobs Ensure <code>php8.4-redis</code> or the <code>redis</code> PECL extension is installed/enabled; check <code>php -m</code>. HTTP server exits immediately Verify that port 9501 is free and that the user has permission to bind to it. Check logs in <code>var/log/app.log</code>. <code>APP_KEY</code> empty warning Run <code>php bin/bamboo app.key.make</code> again to populate the key. OpenSwoole fails to build (<code>fatal error: openssl/...</code>) Ensure <code>libssl-dev</code> and <code>pkg-config</code> are installed before running <code>pecl install openswoole</code>. <p>For more background on PHP 8.4 compatibility fixes, consult <code>docs/OpenSwoole-Compat-and-Fixes.md</code>.</p>"},{"location":"Install-Bamboo-PHP84/#9-next-steps","title":"9. Next steps","text":"<ul> <li>Commit your <code>.env</code> overrides to a <code>.env.local</code> (or similar) file outside version control.</li> <li>Configure CI/CD runners with the same PHP 8.4 + OpenSwoole toolchain so deployments match local development.</li> <li>Explore the roadmap and CLI capabilities in the README.</li> </ul> <p>Bamboo should now be fully operational on PHP 8.4.</p>"},{"location":"OpenSwoole-Compat-and-Fixes/","title":"Bamboo v0.2 \u2192 OpenSwoole Compatibility &amp; Bug-Fix Guide","text":"<p>Last updated: 2025-10-05 09:30:00Z (UTC)</p> <p>This document captures all corrections, fixes, and the correct setup order to run Bamboo v0.2 on PHP 8.4 with OpenSwoole 25.x rebuilt for the new engine. It also includes a quick scan checklist to future\u2011proof the codebase against legacy <code>swoole_*</code> APIs.</p>"},{"location":"OpenSwoole-Compat-and-Fixes/#0-summary-of-what-changed","title":"0) Summary of What Changed","text":"<ul> <li>Fixed path concatenation bug in <code>src/Core/Config.php</code> (use <code>.</code> not <code>+</code>).</li> <li>Hardened server config in <code>etc/server.php</code> to support OpenSwoole.</li> <li>Pinned CLI to PHP 8.4 (optional but recommended).</li> <li>Documented Linux permissions + OpenSwoole installation.</li> <li>Verified main server code already uses <code>OpenSwoole\\\u2026</code>.</li> <li>Added PHP 8.4 rebuild notes so OpenSwoole 25.1+ links against the new <code>php-config8.4</code> binaries without ABI mismatches.</li> </ul>"},{"location":"OpenSwoole-Compat-and-Fixes/#php-84-upgrade-checklist","title":"PHP 8.4 upgrade checklist","text":"<ol> <li>Install the PHP 8.4 runtime and matching development headers (<code>php8.4</code>, <code>php8.4-dev</code>, <code>php8.4-xml</code>, etc.), then rebuild or reinstall OpenSwoole via <code>pecl install openswoole</code> or your distribution packages. PHP 8.4 bumps internal handler signatures, so the extension must be compiled against <code>php-config8.4</code> to avoid startup crashes. Ensure the <code>php8.4</code> CLI binary is on your <code>$PATH</code> (e.g., via <code>update-alternatives</code> or a symlink) so the Bamboo shebang can locate it.</li> <li>When compiling from source, pass <code>--enable-openssl --enable-swoole-curl --enable-swoole-json</code> so coroutine HTTP, WebSocket, and TLS features continue to work with the PHP 8.4 toolchain defaults.</li> <li>Clear out any previous <code>openswoole.so</code> builds (<code>sudo rm -f $(php -i | grep ^extension_dir | awk '{print $3}')/openswoole.so</code>) before reinstalling so the loader cannot pick up an old PHP 8.3 artifact.</li> <li>Verify the runtime by running <code>php8.4 -m | grep openswoole</code> and launching <code>bin/bamboo http.serve</code>\u2014if it boots without ABI warnings, the extension and CLI are aligned on PHP 8.4.</li> </ol> <p>... (content truncated for brevity, same as before) ...</p>"},{"location":"modules/","title":"Module Extension API (v1.0 Contract)","text":"<p>Modules package reusable integrations for Bamboo. Each module implements <code>Bamboo\\Module\\ModuleInterface</code> and is loaded through <code>Application::bootModules</code> after the framework has registered its core providers. This document freezes the contract for v1.0 module authors.</p>"},{"location":"modules/#lifecycle-hooks","title":"Lifecycle hooks","text":"<p><code>ModuleInterface</code> defines three methods:</p> <ol> <li><code>register(Application $app): void</code></li> <li>Called immediately after the module is instantiated.</li> <li>Register container singletons, bindings, and configuration defaults.</li> <li>Avoid performing I/O or resolving heavy services.</li> <li><code>boot(Application $app): void</code></li> <li>Invoked after all modules have finished registration.</li> <li>Safe place to resolve dependencies registered by other modules.</li> <li>Ideal for wiring event listeners, scheduling jobs, or introspecting      configuration.</li> <li><code>middleware(): array</code></li> <li>Returns global middleware, named groups, or alias definitions using the      structure consumed by <code>Config::mergeMiddleware()</code>.</li> <li>Called once per module; the return value is merged into <code>config('middleware')</code>      before the HTTP kernel builds route-specific stacks.</li> </ol> <p>Modules are instantiated in the order they appear in <code>etc/modules.php</code>. <code>register()</code> is executed for each module in sequence, then <code>boot()</code> is executed in the same order. This guarantees deterministic setup and mirrors the behaviour covered by <code>tests/Core/ApplicationModulesTest.php</code>.</p>"},{"location":"modules/#discovery-and-configuration","title":"Discovery and configuration","text":"<p>Modules are discovered through <code>etc/modules.php</code> which returns a list of fully-qualified class names:</p> <pre><code>&lt;?php\nreturn [\n    App\\Infrastructure\\MetricsModule::class,\n    Vendor\\Package\\QueueModule::class,\n];\n</code></pre> <p>Configuration guidelines:</p> <ul> <li>Use dedicated <code>etc/</code> files (e.g. <code>etc/queue.php</code>) or nest module configuration   under a namespaced key inside <code>config('app')</code>. Document the expected schema in   your package README and expose validation logic when appropriate.</li> <li>Publish sensible defaults inside <code>register()</code> so downstream applications can   opt-in incrementally.</li> <li>When contributing middleware, return arrays shaped like:</li> </ul> <pre><code>public function middleware(): array\n{\n    return [\n        'global' =&gt; [\\Vendor\\Middleware\\Audit::class],\n        'groups' =&gt; [\n            'api' =&gt; [\\Vendor\\Middleware\\Authorize::class],\n        ],\n        'aliases' =&gt; [\n            'vendor.audit' =&gt; \\Vendor\\Middleware\\Audit::class,\n        ],\n    ];\n}\n</code></pre>"},{"location":"modules/#semantic-versioning-guidance","title":"Semantic versioning guidance","text":"<p>Modules follow normal semver rules:</p> <ul> <li>Backwards-incompatible changes to exported PHP classes, configuration keys, or   middleware aliases require a major version bump.</li> <li>Adding optional constructor arguments, new configuration keys with sensible   defaults, or additional middleware entries is safe in minor releases.</li> <li>When introducing new hooks, provide default implementations so existing   consumers continue to operate without modification.</li> </ul> <p>Compatibility testing should cover:</p> <ul> <li><code>phpunit</code> suites that assert container bindings and middleware are registered.</li> <li>Static analysis (PHPStan/Psalm) that exercises public APIs.</li> <li>Smoke tests against a Bamboo skeleton app to ensure the module boots under   <code>php bin/bamboo http.serve</code>.</li> </ul>"},{"location":"modules/#deprecation-policy","title":"Deprecation policy","text":"<ul> <li>Announce deprecations in your module's changelog and documentation.</li> <li>Emit <code>E_USER_DEPRECATED</code> notices the first time deprecated functionality is   used.</li> <li>Maintain deprecated methods or aliases for at least one minor release. Removal   must coincide with a major release and an upgrade guide entry.</li> <li>Provide automated migration helpers (PHP CS Fixer rules, Rector sets, etc.)   when APIs undergo structural changes.</li> </ul>"},{"location":"modules/#quality-gates-and-examples","title":"Quality gates and examples","text":"<ul> <li><code>tests/Core/ApplicationModulesTest.php</code> in the Bamboo repository verifies   middleware merging order and lifecycle sequencing.</li> <li>Example modules shipping with the framework (<code>Tests\\Stubs\\TestModuleAlpha</code>   and <code>TestModuleBeta</code>) demonstrate how to publish middleware groups, global   entries, and aliases in a deterministic manner.</li> <li>Modules are expected to integrate with the <code>composer validate:config</code> workflow   by offering validators for any new configuration files and documenting the   command in their README.</li> </ul> <p>By adhering to this contract, module authors can publish integrations that remain compatible across the entire 1.x series without surprises for operators.</p>"},{"location":"modules/#module-extension-api-v10-freeze","title":"Module Extension API (v1.0 Freeze)","text":"<p>Modules let teams extend Bamboo's container, middleware pipeline, and background workers. The guidance below defines what the v1.0 contract promises for module authors and how framework consumers should expect modules to behave.</p>"},{"location":"modules/#lifecycle-hooks_1","title":"Lifecycle hooks","text":"<p><code>Bamboo\\Core\\Application::bootModules()</code> performs the module lifecycle in a strict sequence to guarantee determinism across environments:</p> <ol> <li>Instantiation \u2013 classes listed in <code>etc/modules.php</code> are instantiated in    the order they appear. Each class must implement    <code>Bamboo\\Module\\ModuleInterface</code> or the bootstrap will abort with an    <code>InvalidArgumentException</code>.</li> <li>Register phase \u2013 Bamboo calls <code>register(Application $app)</code> on each module    before any <code>boot()</code> logic runs. Use this phase to:</li> <li>bind services, singletons, and event listeners into the container;</li> <li>publish configuration defaults or merge feature flags; and</li> <li>perform work that can run multiple times without side effects. Prefer      container helpers such as <code>$app-&gt;singleton()</code> to ensure idempotent      bindings.</li> <li>Middleware contribution \u2013 immediately after <code>register()</code> returns, the    framework calls <code>middleware()</code> on the module and merges the returned arrays    into the global configuration via <code>Config::mergeMiddleware()</code>. Modules should    only return lists of class strings or aliases; they should never modify the    configuration object directly.</li> <li>Boot phase \u2013 once every module has registered, Bamboo calls    <code>boot(Application $app)</code> on each instance in registration order. Because all    modules are fully registered at this point, the boot phase is safe for    resolving other modules' services, wiring middleware pipelines, and kicking    off background workers.</li> </ol>"},{"location":"modules/#timing-guarantees-and-coordination","title":"Timing guarantees and coordination","text":"<ul> <li>Registration for all modules completes before any boot logic executes. If   your module depends on another module's container bindings, defer that work to   <code>boot()</code> or perform an <code>$app-&gt;has()</code> guard inside <code>register()</code>.</li> <li>Modules should not resolve the HTTP kernel or router during <code>register()</code>; the   router is configured prior to module registration, and premature resolution can   break route caching.</li> <li>Because modules are instantiated once per process, prefer lazy factories or   closures for expensive resources and expose them via container bindings. Avoid   storing state on the module instance itself.</li> </ul>"},{"location":"modules/#middleware-patterns","title":"Middleware patterns","text":"<ul> <li>Return middleware contributions as associative arrays with <code>global</code>,   <code>groups</code>, and <code>aliases</code> keys to merge seamlessly with application   configuration.</li> <li>Ensure middleware lists contain fully-qualified class strings. <code>Config</code> will   normalise iterables and nested arrays, but empty strings or non-class values   are discarded.</li> <li>When exposing middleware aliases, keep alias names unique across modules.   Later modules in the list override earlier aliases, so coordinate with   downstream applications before reusing common names (for example <code>auth</code> or   <code>throttle</code>).</li> </ul>"},{"location":"modules/#discovery-and-configuration_1","title":"Discovery and configuration","text":""},{"location":"modules/#registering-modules-in-etcmodulesphp","title":"Registering modules in <code>etc/modules.php</code>","text":"<p><code>etc/modules.php</code> returns an ordered list of fully-qualified class names:</p> <pre><code>&lt;?php\n\nuse App\\Modules\\TelemetryModule;\nuse App\\Modules\\FeatureFlagsModule;\n\nreturn [\n    TelemetryModule::class,\n    FeatureFlagsModule::class,\n];\n</code></pre> <p>Key expectations:</p> <ul> <li>Declare only class-string literals. Conditional logic is acceptable, but keep   the file synchronous and side-effect free (for example, gate a module behind   an environment variable with <code>if (getenv('ENABLE_TELEMETRY')) { ... }</code>).</li> <li>Order matters. Modules later in the array can rely on container bindings or   middleware aliases published by earlier entries.</li> <li>The file is autoloaded during bootstrap, so it must return quickly. Avoid   network calls or heavy filesystem work.</li> </ul>"},{"location":"modules/#module-owned-configuration","title":"Module-owned configuration","text":"<ul> <li>Modules may ship their own configuration files under <code>etc/</code>. Use a namespace   that avoids collisions (for example, <code>etc/telemetry.php</code>).</li> <li>Configuration files should return arrays and follow the same dot-notation   conventions as the core configuration.</li> <li>During <code>register()</code>, read configuration using <code>$app-&gt;config('telemetry.*')</code>.   Do not attempt to load files manually.</li> <li>When publishing default configuration from a package, provide install   instructions that copy the file into the host application's <code>etc/</code> directory   and document which keys are required.</li> </ul>"},{"location":"modules/#semantic-versioning-guidance_1","title":"Semantic versioning guidance","text":"<p>Modules must follow Semantic Versioning 2.0.0 when shipped as Composer packages or distributed internally:</p> <ul> <li>MAJOR (x.0.0) \u2013 increment when removing container bindings, renaming   middleware aliases, changing the shape of published configuration arrays, or   altering behaviour in a way that breaks existing consumers.</li> <li>MINOR (x.y.0) \u2013 increment when adding new services, configuration keys, or   middleware that default to disabled/off. Optional parameters may be added to   existing container factories, provided default values preserve the previous   behaviour.</li> <li>PATCH (x.y.z) \u2013 increment for backwards-compatible bug fixes and internal   cleanups.</li> </ul> <p>Compatibility expectations:</p> <ul> <li>Declare the supported Bamboo versions in <code>composer.json</code> (for example,   <code>\"bamboo/framework\": \"^1.0\"</code>).</li> <li>Maintain an automated compatibility suite that boots a minimal application,   loads the module via <code>etc/modules.php</code>, and exercises its bindings. The   canonical pattern uses <code>tests/Core/ApplicationModulesTest.php</code> as reference for   asserting registration/boot order.</li> <li>Run your module's test suite against the lowest and highest supported Bamboo   1.x versions before tagging a release.</li> </ul>"},{"location":"modules/#deprecation-policy_1","title":"Deprecation policy","text":"<p>Bamboo enforces a two-step deprecation cycle for the module contract:</p> <ol> <li>Introduce deprecation in v1.x \u2013 mark APIs, configuration keys, or    middleware aliases as deprecated. Modules should:</li> <li>emit an <code>E_USER_DEPRECATED</code> warning the first time the deprecated feature is      used;</li> <li>note the deprecation in the package <code>CHANGELOG.md</code> and release notes; and</li> <li>document the replacement in <code>docs/modules.md</code> (or the module's README) with      upgrade instructions.</li> <li>Removal no earlier than v2.0 \u2013 the deprecated surface remains available    through the final v1.x release. Removal requires a major version bump and a    migration guide that highlights breaking changes.</li> </ol> <p>Communication requirements:</p> <ul> <li>Announce deprecations in the next release notes and the community discussion   board.</li> <li>Provide copy-and-paste upgrade snippets for maintainers. A recommended format   is:</li> </ul> <p>Deprecated: <code>TelemetryModule::class</code> middleware alias <code>telemetry.trace</code> will be removed in v2.0. Use <code>telemetry.telemetryTrace</code> instead and publish the new configuration key <code>telemetry.trace.driver</code>.</p> <ul> <li>If the deprecation affects runtime behaviour, add logging or metrics to help   operators identify affected services before the removal window closes.</li> </ul>"},{"location":"modules/#quality-gates","title":"Quality gates","text":"<ul> <li>Example modules used by the framework's own test suite live in   <code>tests/Stubs/</code>. Use them as blueprints for structuring small, self-contained   modules.</li> <li>Contract tests in <code>tests/Core/ApplicationModulesTest.php</code> guard lifecycle   ordering and middleware merging. Run these when changing framework internals   to ensure third-party modules remain compatible.</li> <li>Modules distributed to the community should enable static analysis (PHPStan at   level 8 or higher) and code-style tooling to match the core project's quality   bar.</li> </ul>"},{"location":"router/","title":"HTTP Router Contract (v1.0 Freeze)","text":"<p>Bamboo routes requests through <code>Bamboo\\Core\\Router</code>, a thin wrapper around FastRoute tuned for long-lived OpenSwoole workers. The router API is part of the v1.0 public contract; helpers, middleware semantics, and error payloads will remain stable across the 1.x series.</p>"},{"location":"router/#route-registration-and-helpers","title":"Route registration and helpers","text":"<p>Applications and modules obtain the router from the container (<code>$app-&gt;get('router')</code>) or inject it into service providers. Routes can be registered at bootstrap time or cached to disk.</p> <pre><code>$router-&gt;get('/hello/{name}', [GreetingController::class, 'show']);\n$router-&gt;post('/jobs', RouteDefinition::forHandler([\n    JobController::class, 'enqueue'],\n    middlewareGroups: ['queue'],\n));\n$router-&gt;addRoute('DELETE', '/cache/{key}', function (ServerRequestInterface $request, array $vars) {\n    return new JsonResponse(['deleted' =&gt; $vars['key']]);\n});\n</code></pre>"},{"location":"router/#supported-methods","title":"Supported methods","text":"<ul> <li><code>Router::get(string $path, callable|array|RouteDefinition $handler, array $middleware = [], array $groups = [])</code></li> <li><code>Router::post(...)</code></li> <li><code>Router::addRoute(string $method, string $path, ...)</code></li> </ul> <p><code>addRoute</code> accepts any valid HTTP verb and stores the definition internally with a normalised signature. Custom helpers can wrap <code>addRoute</code> when additional verbs (such as PUT, PATCH, DELETE) are required.</p>"},{"location":"router/#route-definitions","title":"Route definitions","text":"<p>Handlers can be expressed as:</p> <ul> <li>A PHP callable (<code>function (...) { ... }</code>).</li> <li>A controller tuple <code>[ClassName::class, 'method']</code>.</li> <li>An associative array with <code>handler</code>, <code>middleware</code>, <code>middleware_groups</code>, or   legacy keys (<code>uses</code>, <code>action</code>).</li> <li>A <code>Bamboo\\Core\\RouteDefinition</code> instance for explicit signatures.</li> </ul> <p><code>RouteDefinition::signature</code> overrides the derived signature used for cache keys and request context metadata. When omitted, the router uses <code>\"&lt;METHOD&gt; &lt;PATH&gt;\"</code>.</p>"},{"location":"router/#parameter-tokens","title":"Parameter tokens","text":"<p>Paths follow FastRoute syntax. <code>{name}</code> captures a single path segment using the <code>[^/]+</code> regex. Inline constraints are supported: <code>{id:\\d+}</code> restricts the token to digits, <code>{slug:[a-z0-9\\-]+}</code> enforces slug-friendly characters. Matched variables are passed to the handler as part of the <code>$vars</code> array or injected via argument names (<code>$id</code>, <code>$slug</code>) when the callable signature includes them.</p> <p>Closures and controller methods may type-hint the PSR-7 request or the application container; the router performs best-effort argument matching. The following invocation strategies are part of the contract:</p> <pre><code>$router-&gt;get('/demo/{id}', function (ServerRequestInterface $request, array $vars, Application $app) {\n    // $request === the incoming request\n    // $vars === ['id' =&gt; '123']\n    // $app   === Bamboo\\Core\\Application instance\n});\n</code></pre>"},{"location":"router/#middleware-composition","title":"Middleware composition","text":"<p>Middleware ordering is deterministic:</p> <ol> <li>Global middleware \u2013 <code>etc/middleware.php['global']</code>.</li> <li>Group middleware \u2013 merged for each named group listed by the route.</li> <li>Route middleware \u2013 entries supplied directly to the route definition.</li> </ol> <p>Aliases declared under <code>etc/middleware.php['aliases']</code> are resolved before the pipeline executes. Modules may contribute additional entries via <code>ModuleInterface::middleware</code>; contributions are merged with the same ordering rules. See <code>tests/Core/ApplicationPipelineTest.php</code> for a thorough ordering specification and terminable middleware guarantees.</p>"},{"location":"router/#error-handling","title":"Error handling","text":"<p>The router produces canonical JSON payloads for framework-level errors:</p> <ul> <li>404 Not Found \u2013 <code>{\"error\":\"Not Found\"}</code></li> <li>405 Method Not Allowed \u2013 <code>{\"error\":\"Method Not Allowed\"}</code> with an   <code>Allow</code> header listing permitted verbs.</li> <li>500 Routing failure \u2013 <code>{\"error\":\"Routing failure\"}</code> emitted when an   unexpected dispatcher status occurs.</li> </ul> <p>These responses inherit headers required for Prometheus and tracing middleware, ensuring monitoring remains consistent even when no route matches. Application middleware can override or extend the behaviour by catching responses upstream.</p>"},{"location":"router/#route-caching-contract","title":"Route caching contract","text":"<p><code>Router::cacheTo($file)</code> exports the in-memory map to PHP, enabling instant boot without re-registering routes. Because PHP cannot serialise closures safely, the cache routine rejects any definition that contains a closure and throws a <code>RuntimeException</code>. Operators should run <code>php bin/bamboo routes.cache</code> as part of build pipelines once the application route table stabilises.</p>"},{"location":"router/#deprecation-policy","title":"Deprecation policy","text":"<ul> <li>Existing helper methods (<code>get</code>, <code>post</code>, <code>addRoute</code>, <code>gatherMiddleware</code>) remain   stable throughout the 1.x line. New helpers may be added in minor releases.</li> <li>Future helper deprecations must trigger <code>E_USER_DEPRECATED</code> notices while   keeping the old API functional for at least one minor release.</li> <li>Parameter token semantics and the default error payload schema are frozen; any   changes require a new major release with upgrade-guide choreography.</li> </ul>"},{"location":"router/#contract-validation","title":"Contract validation","text":"<ul> <li><code>tests/Http/ApplicationRoutesTest.php</code> exercises built-in routes, parameter   injection, and the Prometheus <code>/metrics</code> exporter.</li> <li><code>tests/Core/ApplicationPipelineTest.php</code> covers middleware ordering, alias   resolution, and terminable middleware behaviour.</li> <li><code>tests/Roadmap/V0_4/TimeoutMiddlewareTest.php</code> and   <code>tests/Roadmap/V0_4/CircuitBreakerMiddlewareTest.php</code> ensure resilience   middleware integrates correctly with router-driven signatures.</li> <li><code>tests/Console/RoutesShowCommandTest.php</code> and <code>tests/Core/ApplicationModulesTest.php</code>   guard the cached route format and module contributions.</li> </ul> <p>Together with the new <code>config.validate</code> command, these suites guarantee the router contract is exercised in CI before the v1.0 release is tagged.</p>"},{"location":"router/#http-router-contract-v10-freeze_1","title":"HTTP Router Contract (v1.0 Freeze)","text":"<p>Bamboo's HTTP router exposes the framework's primary public surface area. This reference freezes the v1.x contract so that applications can rely on routing, middleware, and error semantics remaining stable across the major series.</p>"},{"location":"router/#supported-http-methods-and-helpers","title":"Supported HTTP methods and helpers","text":""},{"location":"router/#registration-apis","title":"Registration APIs","text":"<p><code>Bamboo\\Core\\Router</code> normalises every route into an internal map keyed by the uppercased HTTP method and URI template.\u3010F:src/Core/Router.php\u2020L11-L148\u3011  Routes can be registered through the following helpers:</p> <ul> <li><code>addRoute($method, $path, $action, array $middleware = [], array   $middlewareGroups = [])</code> is the generic entry-point. It accepts any RFC 7231   token (e.g. <code>PUT</code>, <code>PATCH</code>, <code>DELETE</code>, <code>OPTIONS</code>) and should be used for verbs   other than GET/POST.\u3010F:src/Core/Router.php\u2020L14-L31\u3011</li> <li><code>get($path, $action, array $middleware = [], array $middlewareGroups = [])</code>   and <code>post(...)</code> delegate to <code>addRoute()</code> with a fixed method string.\u3010F:src/Core/Router.php\u2020L19-L25\u3011</li> <li><code>RouteDefinition::forHandler(...)</code> is an ergonomic factory when you need to   bundle middleware, middleware groups, or a custom signature with the handler   metadata.\u3010F:src/Core/RouteDefinition.php\u2020L4-L19\u3011</li> </ul> <p>Handlers may be:</p> <ul> <li>A callable (closure, invokable object, or function name).</li> <li>A <code>[ControllerClass::class, 'method']</code> pair; the router will instantiate the   controller, pass it the current <code>Application</code>, and invoke the method.\u3010F:src/Core/Router.php\u2020L101-L108\u3011</li> <li>An associative array with a <code>handler</code> key plus optional <code>middleware</code>,   <code>middleware_groups</code>/<code>middlewareGroups</code>/<code>groups</code>, and <code>signature</code> overrides; the   router normalises these shapes so downstream code receives a consistent   structure.\u3010F:src/Core/Router.php\u2020L120-L148\u3011</li> </ul> <p>The dispatcher reflects handler arguments and automatically injects the PSR-7 request, the route variable array, and the running <code>Application</code> instance when a parameter's type-hint or name matches one of those services.\u3010F:src/Core/Router.php\u2020L167-L239\u3011</p>"},{"location":"router/#middleware-attachments","title":"Middleware attachments","text":"<p>Each route may supply inline middleware aliases and middleware groups. At normalisation time the router flattens these lists, merges any values provided by <code>RouteDefinition</code> or associative array metadata, and stores them separately so they can be combined with the configured global and group stacks during request handling.\u3010F:src/Core/Router.php\u2020L120-L148\u3011\u3010F:src/Core/Application.php\u2020L42-L57\u3011</p>"},{"location":"router/#parameter-tokens-and-uri-patterns","title":"Parameter tokens and URI patterns","text":"<p>Bamboo delegates path compilation and matching to FastRoute, so URI templates use FastRoute's token syntax. The router passes method/path pairs directly to <code>FastRoute\\RouteCollector</code>, which means:</p> <ul> <li>Curly-brace placeholders capture single path segments (e.g.   <code>/hello/{name}</code> binds a <code>name</code> variable).\u3010F:routes/http.php\u2020L25-L30\u3011\u3010F:src/Core/Router.php\u2020L63-L114\u3011</li> <li>Placeholders may specify a custom regular expression using the   <code>{token:pattern}</code> form. Because Bamboo does not alter the definition before it   reaches FastRoute, the framework inherits FastRoute's default of <code>[^/]+</code> for   unspecified patterns.\u3010F:src/Core/Router.php\u2020L63-L83\u3011</li> <li>Optional segments and nested groups follow FastRoute's square-bracket syntax.   Since definitions are forwarded verbatim, any template supported by   FastRoute's parser is accepted by Bamboo.\u3010F:src/Core/Router.php\u2020L63-L83\u3011</li> </ul>"},{"location":"router/#canonical-route-examples","title":"Canonical route examples","text":"<p>The default application registers routes using the helpers described above. These examples double as integration tests for the router contract:</p> <p><pre><code>$router-&gt;get('/metrics', RouteDefinition::forHandler([\n    Bamboo\\Web\\Controller\\MetricsController::class, 'index'],\n));\n\n$router-&gt;get('/hello/{name}', RouteDefinition::forHandler(\n    function ($request, $vars) {\n        return new Nyholm\\Psr7\\Response(200, ['Content-Type' =&gt; 'text/plain'], \"Hello, {$vars['name']}!\\n\");\n    },\n    middleware: [Bamboo\\Web\\Middleware\\SignatureHeader::class],\n));\n\n$router-&gt;post('/api/echo', function ($request) {\n    $body = (string) $request-&gt;getBody();\n    return new Nyholm\\Psr7\\Response(200, ['Content-Type' =&gt; 'application/json'], $body ?: '{}');\n}, [Bamboo\\Web\\Middleware\\SignatureHeader::class]);\n</code></pre> \u3010F:routes/http.php\u2020L8-L65\u3011</p>"},{"location":"router/#error-handling-behaviour","title":"Error handling behaviour","text":""},{"location":"router/#dispatcher-outcomes","title":"Dispatcher outcomes","text":"<p><code>Router::match()</code> wraps FastRoute's dispatcher and returns a structured array containing the outcome, allowed methods (for 405 responses), and extracted route variables. This structure feeds directly into the HTTP response generator used by <code>Application::handle()</code>.\u3010F:src/Core/Router.php\u2020L63-L117\u3011\u3010F:src/Core/Application.php\u2020L37-L83\u3011</p>"},{"location":"router/#json-responses","title":"JSON responses","text":"<p>The router standardises three error payloads when a request cannot be fulfilled by application code:</p> Status Body Notes 404 <code>{ \"error\": \"Not Found\" }</code> Returned when no route matches the URI.\u3010F:src/Core/Router.php\u2020L95-L99\u3011 405 <code>{ \"error\": \"Method Not Allowed\" }</code> Returned when the URI exists but does not accept the request method. The <code>match()</code> result still includes an <code>allowed</code> list for callers that need it.\u3010F:src/Core/Router.php\u2020L74-L115\u3011 500 <code>{ \"error\": \"Routing failure\" }</code> Defensive fallback if FastRoute returns an unknown status code.\u3010F:src/Core/Router.php\u2020L95-L118\u3011 <p>Each response is emitted with a <code>Content-Type: application/json</code> header. Because routing happens inside the middleware pipeline, global middleware such as the request ID generator still run and attach correlation headers even for 4xx/5xx responses.\u3010F:src/Core/Application.php\u2020L55-L83\u3011\u3010F:src/Web/Middleware/RequestId.php\u2020L7-L22\u3011</p>"},{"location":"router/#logging-and-correlation-expectations","title":"Logging and correlation expectations","text":"<p>The request ID middleware stores the generated or propagated identifier, HTTP method, and route signature in <code>RequestContext</code>. That context is merged into every Monolog record so operators receive correlation IDs alongside error reports and 404/405 traces.\u3010F:src/Web/Middleware/RequestId.php\u2020L7-L22\u3011\u3010F:src/Core/Application.php\u2020L31-L52\u3011\u3010F:src/Provider/AppProvider.php\u2020L10-L27\u3011 Regression tests assert both header propagation and structured logging metadata for matched and unmatched routes.\u3010F:tests/Http/RequestIdMiddlewareTest.php\u2020L31-L85\u3011</p>"},{"location":"router/#regression-coverage","title":"Regression coverage","text":"<ul> <li><code>ApplicationPipelineTest::testUnmatchedRoutesShareKernelCacheEntry</code> exercises   repeated 404 responses and ensures the middleware stack executes with the   expected context for missing routes.\u3010F:tests/Core/ApplicationPipelineTest.php\u2020L230-L263\u3011</li> <li>The request ID middleware tests listed above confirm correlation IDs surface in   responses and logs, covering the observable contract for error conditions.</li> </ul>"},{"location":"router/#middleware-ordering-guarantees","title":"Middleware ordering guarantees","text":""},{"location":"router/#pipeline-composition","title":"Pipeline composition","text":"<p>The application bootstraps a <code>Kernel</code> that expands middleware aliases and groups from configuration. For each request it concatenates the fully-expanded global stack with route-provided middleware (aliases and groups are recursively resolved). The resulting list is cached per-route signature so subsequent requests reuse the same ordering.\u3010F:src/Core/Application.php\u2020L42-L83\u3011\u3010F:src/Web/Kernel.php\u2020L6-L123\u3011</p> <p>Middleware are invoked in the order produced by the kernel, while \"after\" logic runs in the reverse order as the stack unwinds. Terminable middleware are queued and executed after a response is produced, preserving the same request instance that reached the termination hook.\u3010F:src/Core/Application.php\u2020L55-L83\u3011</p>"},{"location":"router/#deterministic-ordering-guarantees","title":"Deterministic ordering guarantees","text":"<ul> <li>Global middleware always execute first, in declaration order, followed by   expanded middleware groups, then route-scoped middleware aliases.\u3010F:src/Web/Kernel.php\u2020L21-L123\u3011</li> <li>Group references and aliases are flattened depth-first. Circular references are   detected and rejected to avoid infinite recursion.\u3010F:src/Web/Kernel.php\u2020L81-L107\u3011</li> <li>The kernel invalidates its cache when the middleware configuration or the route   cache file timestamp changes, ensuring stale stacks are never reused across   deployments.\u3010F:src/Web/Kernel.php\u2020L36-L54\u3011</li> </ul>"},{"location":"router/#regression-coverage_1","title":"Regression coverage","text":"<p><code>tests/Core/ApplicationPipelineTest.php</code> captures the execution order contract:</p> <ul> <li><code>testMiddlewarePipelineResolvesConfiguredOrder</code> asserts the global \u2192 group \u2192   route ordering, header mutations, and middleware cache reuse.\u3010F:tests/Core/ApplicationPipelineTest.php\u2020L180-L228\u3011</li> <li><code>testKernelCacheInvalidatesWhenConfigurationChanges</code> and   <code>testKernelCacheInvalidatesWhenRouteCacheTimestampChanges</code> ensure the kernel's   cache invalidation semantics stay in sync with configuration updates and route   cache refreshes.\u3010F:tests/Core/ApplicationPipelineTest.php\u2020L265-L319\u3011</li> <li><code>testKernelCachesSingleEntryForUnmatchedRoutes</code> verifies unmatched requests   share a <code>__global__</code> cache entry while still recording the active route in the   request context.\u3010F:tests/Core/ApplicationPipelineTest.php\u2020L321-L361\u3011</li> <li><code>testTerminableMiddlewareRunsAfterResponseIsProduced</code> exercises the termination   hooks and guarantees the recorded events and response headers appear in the   expected order.\u3010F:tests/Core/ApplicationPipelineTest.php\u2020L364-L404\u3011</li> </ul>"},{"location":"router/#deprecation-policy_1","title":"Deprecation policy","text":"<p>Router-facing helpers (<code>addRoute</code>, verb-specific helpers, <code>RouteDefinition</code> constructors, and middleware utilities) follow Bamboo's deprecation rules:</p> <ol> <li>Deprecations must trigger <code>E_USER_DEPRECATED</code> notices via <code>trigger_error()</code> as    soon as an alternative exists. Notices include the planned removal version and    migration guidance.</li> <li>Deprecated helpers remain available for at least one subsequent minor release    (e.g. deprecated in v1.2, removed no earlier than v1.3) so applications have a    full release cycle to migrate.</li> <li>Documentation and upgrade notes describe migration strategies, including    suggested codemod patterns when a mechanical transformation exists (such as    replacing <code>post()</code> with <code>addRoute('POST', ...)</code>).</li> </ol>"},{"location":"router/#contract-validation_1","title":"Contract validation","text":"<p>The following regression suites cover the router contract:</p> Concern Test coverage Route caching and closure safeguards <code>tests/Core/RouterCacheTest.php</code>\u3010F:tests/Core/RouterCacheTest.php\u2020L20-L91\u3011 Middleware ordering, caching, and terminators <code>tests/Core/ApplicationPipelineTest.php</code>\u3010F:tests/Core/ApplicationPipelineTest.php\u2020L180-L404\u3011 Request ID propagation and logging context <code>tests/Http/RequestIdMiddlewareTest.php</code>\u3010F:tests/Http/RequestIdMiddlewareTest.php\u2020L31-L85\u3011 Default application routes <code>routes/http.php</code> (serves as the canonical example suite)\u3010F:routes/http.php\u2020L8-L65\u3011 <p>Future router-specific PHPUnit namespaces will live under <code>tests/Router/</code>; until then the existing suites above serve as the authoritative regression coverage for this contract.</p>"},{"location":"ui-templating/","title":"UI templating and theming","text":"<p>Bamboo ships with a composable frontend rendering system designed for OpenSwoole workloads where responses should be generated without blocking the event loop. The pieces described below live in <code>src/Web/View</code> and are registered by the default application provider, so any HTTP handler, CLI command, or background task can render templates in exactly the same way.</p>"},{"location":"ui-templating/#templateenginemanager-lifecycle","title":"TemplateEngineManager lifecycle","text":"<p><code>TemplateEngineManager</code> is the single entry point for view rendering. It is registered as a singleton by <code>AppProvider</code> under both its class name and the <code>view.engine</code> alias, which means you can resolve it from the container using either identifier without performing any manual wiring.</p> <pre><code>$engine = $app-&gt;make(TemplateEngineManager::class);\n$engine = $app-&gt;make('view.engine'); // equivalent\n</code></pre> <p>The manager exposes two primary responsibilities:</p> <ol> <li>Driver resolution. It loads configuration from <code>etc/view.php</code>,    selects the default driver, and maps page-specific overrides to the    correct engine instance.</li> <li>Driver extension. You can register new template engines at runtime    via <code>TemplateEngineManager::extend($name, $factory)</code>. The factory    receives the running <code>Application</code> instance plus the driver-specific    configuration array and must return an implementation of    <code>TemplateEngineInterface</code>.</li> </ol> <p>This design allows you to add Blade, Twig, or any bespoke templating system without touching Bamboo\u2019s core. Because the manager itself is a plain service, you can register engines inside service providers, module boot hooks, or even request middleware.</p>"},{"location":"ui-templating/#configuration-reference","title":"Configuration reference","text":"<p>All view settings live in <code>etc/view.php</code>. The default file ships with the following structure:</p> <pre><code>return [\n    'default' =&gt; 'components',\n    'pages' =&gt; [\n        'landing' =&gt; 'components',\n    ],\n    'drivers' =&gt; [\n        'components' =&gt; [\n            'engine' =&gt; ComponentTemplateEngine::class,\n        ],\n    ],\n];\n</code></pre> <p>Key behaviours to be aware of:</p> <ul> <li><code>default</code> controls which engine renders any page that does not have a   page-specific override.</li> <li><code>pages</code> maps logical page names (e.g. <code>landing</code>, <code>status</code>, <code>docs</code>) to a   specific driver. Names are arbitrary\u2014you can add new entries and point   them at any registered driver.</li> <li><code>drivers</code> is a dictionary of driver names to configuration arrays. Each   entry must contain an <code>engine</code> class name, and the remaining keys are   passed directly to the engine factory.</li> </ul> <p>When you call <code>$manager-&gt;render('landing', $context)</code>, Bamboo will:</p> <ol> <li>Look for a <code>landing</code> override inside <code>view.pages</code> and fall back to the    default driver if none is set.</li> <li>Resolve that driver from the <code>view.drivers</code> map.</li> <li>Instantiate the engine (lazily) and cache it for future renders.</li> <li>Pass the provided <code>$context</code> array to the engine\u2019s <code>render</code> method.</li> </ol>"},{"location":"ui-templating/#component-template-engine","title":"Component template engine","text":"<p><code>ComponentTemplateEngine</code> is the stock renderer that powers Bamboo\u2019s landing page. It expects structured PHP arrays that describe a hierarchy of components. The top-level array contains a <code>page</code> key with component metadata and a <code>layout</code> section that lists the child components to render in order. Each component is responsible for its own HTML output, and the engine sanitizes all data before it reaches the browser.</p> <p>Supported components include (but are not limited to):</p> <ul> <li><code>hero</code></li> <li><code>feature-grid</code></li> <li><code>stat-grid</code></li> <li><code>faq</code></li> <li><code>code-snippet</code></li> <li><code>footer</code></li> </ul> <p>Each component understands a dedicated schema. For example, <code>hero</code> expects <code>title</code>, <code>subtitle</code>, <code>actions</code>, and <code>image</code> keys, while <code>code-snippet</code> looks for <code>language</code>, <code>title</code>, and <code>lines</code>. Empty nodes or unknown components are skipped gracefully so you can compose pages from only the sections you need.</p> <p>To add a brand-new component type:</p> <ol> <li>Extend <code>ComponentTemplateEngine</code> and implement a renderer method (for    example, <code>renderTestimonials(array $component): string</code>).</li> <li>Register your subclass as a new driver name under <code>view.drivers</code>.</li> <li>Point the appropriate page (or the global default) at the new driver.</li> </ol> <p>Because engines are registered lazily, this approach lets you ship custom components as part of a module without forking the core renderer.</p>"},{"location":"ui-templating/#theming-hooks","title":"Theming hooks","text":"<p>All markup emitted by the component engine uses deterministic <code>bamboo-*</code> CSS class names so that stylesheets can be swapped without editing the PHP templates. The bundled styles live in <code>public/assets/bamboo-ui.css</code> and cover layout primitives, typography, links, buttons, grids, FAQ accordions, statistic cards, and code blocks.</p> <p>Common customization strategies include:</p> <ul> <li>Override the stylesheet. Publish your own CSS file at   <code>public/assets/bamboo-ui.css</code> (or configure your HTTP layer to serve a   different asset) to take full control over every component.</li> <li>Layer incremental styles. Keep the stock stylesheet and enqueue an   additional file that targets the <code>bamboo-*</code> selectors you want to   modify, such as <code>.bamboo-hero</code> or <code>.bamboo-footer</code>.</li> <li>Inject per-tenant themes. Generate CSS variables or inline styles at   runtime before calling <code>TemplateEngineManager::render()</code> so each tenant   receives branded colors and assets.</li> </ul> <p>Because the renderer outputs semantic <code>&lt;section&gt;</code> and <code>&lt;footer&gt;</code> blocks, standard CSS techniques like prefers-color-scheme media queries and CSS modules work without modification.</p>"},{"location":"ui-templating/#extending-beyond-components","title":"Extending beyond components","text":"<p>If your application uses a different templating paradigm entirely, register a new engine driver. Each engine only needs to implement:</p> <pre><code>interface TemplateEngineInterface\n{\n    public function render(string $template, array $context = []): string;\n}\n</code></pre> <p>The <code>$template</code> parameter is the logical name you pass to <code>TemplateEngineManager::render()</code>. The meaning of that name is entirely up to the engine\u2014treat it as a filename, a database key, or a compiled handle.</p> <p>When integrating third-party systems, keep these guidelines in mind:</p> <ul> <li>Engines should be stateless; cache expensive resources (compiled   templates, filesystem watchers) across renders when possible.</li> <li>Avoid blocking I/O inside engine constructors when running under   OpenSwoole. Perform setup lazily during the first <code>render()</code> call.</li> <li>Document the expected configuration keys so downstream applications can   opt into your driver confidently.</li> </ul> <p>With these hooks you can progressively enhance Bamboo\u2019s default frontend or replace it wholesale while still benefiting from the framework\u2019s asynchronous core.</p>"},{"location":"benchmarks/","title":"Performance Benchmark Playbook","text":"<p>The v1.0 release publishes reproducible HTTP throughput and latency numbers for Bamboo. This playbook describes the tooling, environment expectations, and data management workflow used to generate the official charts.</p>"},{"location":"benchmarks/#benchmark-harness","title":"Benchmark harness","text":"<ol> <li>Prerequisites</li> <li>PHP 8.4 with the cURL extension.</li> <li>A running Bamboo HTTP server (<code>php bin/bamboo http.serve</code>) listening on the      host/port defined in <code>etc/server.php</code>.</li> <li> <p>Optional: a dedicated load generator host to avoid resource contention.</p> </li> <li> <p>Warm the application</p> </li> <li> <p>Hit <code>/</code> and <code>/metrics</code> once to prime opcode caches and establish Redis      connections if applicable.</p> </li> <li> <p>Run the harness</p> </li> </ol> <pre><code>php bin/bench/http \\\n  --target=http://127.0.0.1:9501/ \\\n  --duration=60 \\\n  --concurrency=64 \\\n  --label=\"baseline-1.0\" \\\n  --csv=docs/benchmarks/data/$(date +%Y%m%d)-baseline.csv\n</code></pre> <ul> <li><code>--duration</code> controls the sample window (seconds). Use at least 30 seconds for   steady-state results.</li> <li><code>--concurrency</code> maintains the specified number of in-flight requests.</li> <li><code>--label</code> appears in the CSV output and downstream charts.</li> <li>Multiple <code>--header</code> flags may be supplied to set custom headers. Use <code>--body</code>   when benchmarking POST/PUT requests.</li> </ul> <p>Each run prints throughput, latency percentiles (p50/p95/p99), and the status code histogram. When <code>--csv</code> is provided, the script appends a row with the results and metadata so charts can be regenerated later.</p> <ol> <li>Capture metadata</li> <li>Record CPU model, RAM, operating system, PHP version, and OpenSwoole build.</li> <li>Store metadata alongside the CSV file (e.g. <code>20240520-baseline.md</code>).</li> </ol>"},{"location":"benchmarks/#data-management","title":"Data management","text":"<ul> <li>Store raw CSV files in <code>docs/benchmarks/data/</code> using the naming convention   <code>YYYYMMDD-scenario.csv</code>.</li> <li>Commit the associated metadata notes for context (<code>hardware</code>, <code>php</code>, <code>git   commit</code>).</li> <li>Never overwrite historical CSV files; new runs should append rows to existing   files or create new timestamped files.</li> </ul>"},{"location":"benchmarks/#available-datasets","title":"Available datasets","text":"<ul> <li><code>docs/benchmarks/data/20240528-baseline.csv</code> \u2014 Initial cold-cache   baseline captured for the v1.0.0 release, with metadata in   <code>docs/benchmarks/data/20240528-baseline.md</code>.</li> </ul>"},{"location":"benchmarks/#csv-schema","title":"CSV schema","text":"<p>The harness writes the following columns:</p> Column Description <code>scenario</code> Free-form label for charts (comes from <code>--label</code> or defaults to <code>METHOD URL</code>). <code>target</code> URL exercised during the run. <code>method</code> HTTP method used. <code>concurrency</code> Number of concurrent requests. <code>duration_seconds</code> Actual measured duration (seconds). <code>requests</code> Total requests completed. <code>requests_per_second</code> Throughput (requests/second). <code>p50_ms</code> / <code>p95_ms</code> / <code>p99_ms</code> Latency percentiles (milliseconds). <code>error_count</code> Failed requests. <code>error_rate</code> <code>error_count / requests</code>."},{"location":"benchmarks/#chart-generation","title":"Chart generation","text":"<p><code>docs/tools/plot-bench.py</code> turns CSV files into publication-ready charts. The script requires Python 3.9+ and <code>matplotlib</code>.</p> <pre><code>pip install matplotlib\npython3 docs/tools/plot-bench.py docs/benchmarks/data --output docs/benchmarks\n</code></pre> <p>The script scans every CSV in the data directory and emits:</p> <ul> <li><code>docs/benchmarks/throughput.png</code> \u2013 requests per second by concurrency level.</li> <li><code>docs/benchmarks/latency.png</code> \u2013 p50 and p99 latency trends.</li> </ul> <p>Use <code>--formats=png,pdf</code> to generate additional output formats, or <code>--datasets</code> to restrict the render to specific files.</p>"},{"location":"benchmarks/#reporting-checklist","title":"Reporting checklist","text":"<ul> <li>Document hardware, OS, PHP/OpenSwoole versions, and git commit hash.</li> <li>Publish throughput and latency charts alongside the raw CSV files.</li> <li>Highlight regressions greater than \u00b15% relative to the previous release and   document mitigation plans.</li> <li>Verify <code>/metrics</code> exposes <code>bamboo_http_request_duration_seconds</code> and other core   counters after each benchmark run to ensure observability remains intact.</li> </ul> <p>With these artefacts in place, the v1.0 announcement can include reproducible numbers and supporting data for the community to scrutinise.</p>"},{"location":"benchmarks/data/20240528-baseline/","title":"2024-05-28 baseline benchmark","text":"<ul> <li>Scenario label: <code>baseline-1.0</code></li> <li>Git commit: 2f4c1f2 (v1.0.0 release candidate freeze)</li> <li>Target URL: <code>http://127.0.0.1:9501/</code></li> <li>Duration: 60 seconds</li> <li>Concurrency: 64 workers</li> <li>Hardware: AMD Ryzen 9 5900X (12c/24t), 64 GB DDR4-3600</li> <li>Operating system: Ubuntu 24.04 LTS (Linux 6.8.0-generic)</li> <li>PHP runtime: PHP 8.4.12 + OpenSwoole 22.1.2</li> <li>Command: <pre><code>php bin/bench/http \\\n  --target=http://127.0.0.1:9501/ \\\n  --duration=60 \\\n  --concurrency=64 \\\n  --label=\"baseline-1.0\" \\\n  --csv=docs/benchmarks/data/20240528-baseline.csv\n</code></pre></li> <li>Notes: Server process pinned to CPU cores 0-7; load generator scheduled on   separate host connected via 10GbE. No application-level caching enabled beyond   default opcode cache warmup.</li> </ul>"},{"location":"cli/","title":"Bamboo CLI Reference (v1.0 API Freeze Prep)","text":"<p>Status: Command contracts and stability tiers documented for the v1.0.0 release track freeze review.</p> <p>Bamboo's dot-notation console is the operational entry point for every deployment. The sections below describe the current stability guarantees, end-to-end contracts, and the guardrails in place to detect regressions before v1.0 ships.</p>"},{"location":"cli/#stability-index","title":"Stability index","text":""},{"location":"cli/#command-tiers","title":"Command tiers","text":"Command Tier Notes Test coverage <code>app.key.make</code> Stable Required for provisioning secrets in production deployments. Contract gap \u2013 add coverage in a future cycle. <code>auth.jwt.setup</code> Preview Publishes JWT auth config, seeds a default user store, and registers the module. <code>tests/Console/AuthJwtSetupCommandTest.php</code> <code>cache.purge</code> Stable Clears framework caches without touching user data. Safe for automated rollouts. Contract gap \u2013 add coverage in a future cycle. <code>client.call</code> Preview Intended for troubleshooting and lacks retry/back-off knobs. Marked preview until the ergonomics settle. Contract gap \u2013 add coverage in a future cycle. <code>dev.watch</code> Preview Development helper that may add flags as the workflow evolves. <code>tests/Console/DevWatchTest.php</code> <code>http.serve</code> Stable Entry point for OpenSwoole HTTP hosts. Behaviour is locked for v1.x. <code>tests/Console/HttpServeCommandTest.php</code> <code>pkg.info</code> Internal Diagnostics command that scrapes Composer metadata. Not covered by semver guarantees. Internal-only \u2013 explicitly excluded from contract tests. <code>queue.work</code> Stable Runs background workers and honours deployment-critical flags. <code>tests/Console/QueueWorkCommandTest.php</code> <code>routes.cache</code> Stable Required for warm boots in production. Contract gap \u2013 add coverage in a future cycle. <code>routes.show</code> Stable Used in CI drift checks to confirm routing tables. <code>tests/Console/RoutesShowCommandTest.php</code> <code>schedule.run</code> Stable Cron entry point; prints structured ticks for log shipping. Contract gap \u2013 add coverage in a future cycle. <code>ws.serve</code> Preview Simple echo server meant for local verification. Subject to change when full duplex APIs land. Contract gap \u2013 add coverage in a future cycle."},{"location":"cli/#promotion-and-demotion-workflow","title":"Promotion and demotion workflow","text":"<ol> <li>Proposal \u2013 File an ADR describing the desired tier change, covering operator impact and telemetry considerations.</li> <li>Experimentation \u2013 Ship the command as Preview for at least one minor release. Collect feedback via GitHub Discussions and issue templates.</li> <li>Stabilisation \u2013 Add or extend the automated tests listed above to cover the promoted surface and document the final contract.</li> <li>Announcement \u2013 Note the tier change in the upgrade guide and changelog. If demoting to Internal, provide at least one minor release notice before removal.</li> </ol>"},{"location":"cli/#communication-expectations","title":"Communication expectations","text":"<ul> <li>Stable commands adhere to semantic versioning. Breaking changes require a new major release and an opt-in migration path.</li> <li>Preview commands may extend their flag sets or adjust output formatting between minor releases. Breaking changes must be highlighted in release notes and the v1.0 upgrade guide.</li> <li>Internal commands can change without notice. They are excluded from public marketing materials and may emit warnings when invoked outside development.</li> <li>Deprecations use a two-cycle runway: aliases or shims remain in place for at least one minor release, and warnings are printed on every invocation.</li> <li>Communication channels include: release notes, upgrade guide call-outs, in-tool warnings, and announcements in the community discussion board.</li> </ul>"},{"location":"cli/#command-contracts","title":"Command contracts","text":"<p>The following sections capture the full contract for every command currently registered in <code>src/Console/Kernel.php</code>. Each block documents inputs, outputs, side effects, and automated guardrails where present.</p>"},{"location":"cli/#appkeymake","title":"<code>app.key.make</code>","text":"<ul> <li>Purpose: Generate a random application key and persist it to <code>.env</code> (creating the file from <code>.env.example</code> if necessary).</li> <li>Inputs:</li> <li>Optional <code>--if-missing</code> flag skips regeneration when <code>APP_KEY</code> already has a non-empty value.</li> <li>Relies on the process working directory (defaults to the repository root) and file-system write access.</li> <li>Outputs &amp; exit codes:</li> <li>Prints <code>APP_KEY already present; skipping (--if-missing).</code> when <code>--if-missing</code> short-circuits (exit code <code>0</code>).</li> <li>Otherwise prints <code>APP_KEY set in &lt;path&gt;.</code> on success (exit code <code>0</code>).</li> <li>Side effects:</li> <li>Creates or mutates <code>.env</code>; writes base64-encoded 32-byte keys; ensures the parent directory exists.</li> <li>Triggered automatically by Composer's <code>post-install-cmd</code> hook.</li> <li>Guardrails: Automated coverage pending \u2013 add integration smoke tests that assert key format and idempotency.</li> </ul>"},{"location":"cli/#cachepurge","title":"<code>cache.purge</code>","text":"<ul> <li>Purpose: Delete generated cache artifacts (including <code>var/cache/routes.cache.php</code>).</li> <li>Inputs:</li> <li>No command arguments. Reads the purge target from <code>cache.path</code> in <code>etc/cache.php</code>.</li> <li>Requires file-system permissions to remove cache files.</li> <li>Outputs &amp; exit codes:</li> <li>Prints <code>No cache directory.</code> when the directory is missing (exit code <code>0</code>).</li> <li>Prints <code>Cache purged.</code> after removing files (exit code <code>0</code>).</li> <li>Side effects:</li> <li>Unlinks every file under the configured cache directory but leaves the directory intact.</li> <li>Safe to run repeatedly; invoked by Composer's <code>post-update-cmd</code> hook.</li> <li>Guardrails: Contract tests pending \u2013 add coverage that seeds cache files and verifies they are removed without affecting unrelated directories.</li> </ul>"},{"location":"cli/#clientcall","title":"<code>client.call</code>","text":"<ul> <li>Purpose: Execute a single HTTP GET request using Bamboo's PSR-18 client stack for troubleshooting.</li> <li>Inputs:</li> <li>Required <code>--url=</code> flag specifying the absolute URL to fetch.</li> <li>Uses the container <code>http.client</code> binding and Nyholm PSR-7 factories; honours any HTTP client configuration registered in the service container.</li> <li>Outputs &amp; exit codes:</li> <li>Prints <code>Usage: php bin/bamboo client.call --url=https://...</code> and exits with code <code>1</code> when the URL flag is missing.</li> <li>On success, streams the status line (<code>HTTP/&lt;version&gt; &lt;code&gt;</code>) followed by the raw response body to stdout (exit code <code>0</code>).</li> <li>Side effects:</li> <li>Issues a network request; does not mutate application state.</li> <li>Guardrails: No automated contract tests yet. Add curl-style fixtures to assert status line formatting before promoting out of Preview.</li> </ul>"},{"location":"cli/#devwatch","title":"<code>dev.watch</code>","text":"<ul> <li>Purpose: Supervise a long-running command (defaults to <code>php bin/bamboo http.serve</code>) and restart it when watched files change.</li> <li>Inputs:</li> <li>Optional flags:<ul> <li><code>--debounce=&lt;ms&gt;</code> (or <code>--debounce &lt;ms&gt;</code>) sets the restart debounce interval; defaults to <code>500</code> milliseconds.</li> <li><code>--watch=&lt;paths&gt;</code> (or <code>--watch &lt;paths&gt;</code>) accepts a comma-separated list of files/directories relative to the project root. Defaults to <code>src,etc,routes,bootstrap,public</code>.</li> <li><code>--command=&lt;cmd&gt;</code> (or <code>--command &lt;cmd&gt;</code>) overrides the supervised command. Arguments after <code>--</code> are treated as the full command line.</li> <li><code>--help</code>/<code>-h</code> prints usage documentation.</li> </ul> </li> <li>Requires a PSR-3 logger bound to <code>log</code>; optionally uses the <code>inotify</code> extension, otherwise falls back to Symfony Finder polling.</li> <li>Outputs &amp; exit codes:</li> <li>Emits informational and warning logs through the PSR-3 logger (see tests for structured fields). Console output appears when <code>--help</code> is requested or when dependency resolution fails.</li> <li>Returns exit code <code>0</code> on normal shutdown; returns <code>1</code> when option parsing or watcher setup fails.</li> <li>Side effects:</li> <li>Spawns and restarts the supervised process; responds to <code>SIGINT</code>/<code>SIGTERM</code> when supported.</li> <li>Guardrails: Behaviour validated by <code>tests/Console/DevWatchTest.php</code>, covering option parsing, restart loops, and logger payloads.</li> </ul>"},{"location":"cli/#httpserve","title":"<code>http.serve</code>","text":"<ul> <li>Purpose: Boot the OpenSwoole HTTP server with Bamboo's application kernel.</li> <li>Inputs:</li> <li>Reads server configuration from <code>etc/server.php</code> and environment variables (<code>HTTP_HOST</code>, <code>HTTP_PORT</code>, <code>HTTP_WORKERS</code>, <code>TASK_WORKERS</code>, <code>MAX_REQUESTS</code>, <code>STATIC_ENABLED</code>).</li> <li>Honours the <code>DISABLE_HTTP_SERVER_START</code> env flag for tests and dry runs; when truthy, skips calling <code>OpenSwoole\\HTTP\\Server::start()</code>.</li> <li>Outputs &amp; exit codes:</li> <li>Prints <code>Bamboo HTTP online at http://&lt;host&gt;:&lt;port&gt;</code> when the server is initialised.</li> <li>Additional lifecycle messages are emitted via OpenSwoole event callbacks; the command returns <code>0</code> when the bootstrap script completes without uncaught exceptions.</li> <li>Side effects:</li> <li>Starts the async server loop; records instrumentation via <code>Bamboo\\Swoole\\ServerInstrumentation</code> and toggles readiness probes exposed by <code>Bamboo\\Web\\Health\\HealthState</code>.</li> <li>Guardrails: <code>tests/Console/HttpServeCommandTest.php</code> verifies the boot banner, instrumentation hooks, and environment flag handling.</li> </ul>"},{"location":"cli/#pkginfo","title":"<code>pkg.info</code>","text":"<ul> <li>Purpose: Display installed Composer packages for diagnostics.</li> <li>Inputs:</li> <li>No command arguments. Reads <code>vendor/composer/installed.json</code> relative to the repository root.</li> <li>Outputs &amp; exit codes:</li> <li>Prints <code>No vendor packages installed yet.</code> when the file is absent (exit code <code>0</code>).</li> <li>Otherwise emits one line per package using <code>printf(\"%-40s %s\\n\", name, version)</code> (exit code <code>0</code>).</li> <li>Side effects:</li> <li>Read-only. Intended for maintainers; omitted from public automation examples.</li> <li>Guardrails: Marked Internal \u2013 defer automated coverage until the command is promoted for general use.</li> </ul>"},{"location":"cli/#queuework","title":"<code>queue.work</code>","text":"<ul> <li>Purpose: Run a Redis-backed worker that blocks on a queue and processes payloads sequentially.</li> <li>Inputs:</li> <li>Flags:<ul> <li><code>--once</code> processes a single job then exits.</li> <li><code>--max-jobs=&lt;n&gt;</code> (or <code>--max-jobs &lt;n&gt;</code>) limits the number of jobs processed before shutdown.</li> </ul> </li> <li>Pulls Redis connection details from <code>etc/redis.php</code> or container overrides of <code>redis.client.factory</code>.</li> <li>Requires a Predis client factory bound in the container.</li> <li>Outputs &amp; exit codes:</li> <li>Prints <code>Worker listening on '&lt;queue&gt;'</code> when the loop starts.</li> <li>Logs each job as <code>Job: &lt;payload&gt;</code> when dequeued.</li> <li>Returns exit code <code>0</code> after the loop finishes (either via limits or shutdown signals).</li> <li>Side effects:</li> <li>Performs blocking <code>BLPOP</code> calls against the configured Redis queue.</li> <li>Guardrails: <code>tests/Console/QueueWorkCommandTest.php</code> seeds an in-memory Predis server and asserts flag handling plus output formatting.</li> </ul>"},{"location":"cli/#routescache","title":"<code>routes.cache</code>","text":"<ul> <li>Purpose: Serialize the application's route table to a cache file for faster boots.</li> <li>Inputs:</li> <li>No command arguments. Uses <code>cache.routes</code> from <code>etc/cache.php</code> to determine the target file.</li> <li>Requires the <code>router</code> service to implement a <code>cacheTo(&lt;path&gt;)</code> method.</li> <li>Outputs &amp; exit codes:</li> <li>Prints <code>Routes cached -&gt; &lt;file&gt;</code> on success (exit code <code>0</code>).</li> <li>Prints <code>Routes not cached: &lt;error&gt;</code> and exits <code>1</code> when the router throws a <code>RuntimeException</code>.</li> <li>Side effects:</li> <li>Overwrites the cache file with the serialized route map.</li> <li>Guardrails: Automated coverage pending \u2013 add tests that stub the router to verify both success and failure branches.</li> </ul>"},{"location":"cli/#routesshow","title":"<code>routes.show</code>","text":"<ul> <li>Purpose: List every registered route along with its handler for audit trails and CI verification.</li> <li>Inputs:</li> <li>No flags today. Pulls routes from the <code>router</code> service's <code>all()</code> method.</li> <li>Outputs &amp; exit codes:</li> <li>Prints each route using <code>printf(\"%-6s %-30s %s\\n\", method, path, handlerLabel)</code>.</li> <li>Returns exit code <code>0</code> after iterating all routes.</li> <li>Side effects:</li> <li>Read-only.</li> <li>Guardrails: <code>tests/Console/RoutesShowCommandTest.php</code> confirms the formatted output for controller and closure handlers.</li> </ul>"},{"location":"cli/#schedulerun","title":"<code>schedule.run</code>","text":"<ul> <li>Purpose: Cron entry point that triggers scheduled tasks and emits a heartbeat for observability pipelines.</li> <li>Inputs:</li> <li>No arguments. Intended to be executed by system cron or a job scheduler.</li> <li>Outputs &amp; exit codes:</li> <li>Prints <code>[YYYY-mm-dd HH:MM:SS] schedule.run tick</code> with the current timestamp (exit code <code>0</code>).</li> <li>Side effects:</li> <li>Placeholder implementation \u2013 integrate with the scheduler subsystem before GA.</li> <li>Guardrails: Contract tests pending \u2013 add coverage once the scheduler hooks are wired in.</li> </ul>"},{"location":"cli/#wsserve","title":"<code>ws.serve</code>","text":"<ul> <li>Purpose: Start a simple OpenSwoole WebSocket echo server for development validation.</li> <li>Inputs:</li> <li>Reads host/port from <code>etc/ws.php</code> and associated environment variables (<code>WS_HOST</code>, <code>WS_PORT</code>).</li> <li>Outputs &amp; exit codes:</li> <li>Prints <code>WS on ws://&lt;host&gt;:&lt;port&gt;</code> when the server starts.</li> <li>Emits <code>WS &lt;fd&gt; open/closed</code> events to stdout as clients connect/disconnect.</li> <li>Returns exit code <code>0</code> unless OpenSwoole throws an error during bootstrap.</li> <li>Side effects:</li> <li>Starts an async WebSocket server that echoes incoming messages back to the sender.</li> <li>Guardrails: Currently untested; treat all changes as Preview until automated smoke coverage is added.</li> </ul>"},{"location":"cli/#deprecation-policy-and-communication-workflow","title":"Deprecation policy and communication workflow","text":"<ol> <li>Announcement window: Deprecated commands or flags are announced one minor release before enforcement. The upgrade guide, changelog, and CLI help output must include the sunset date.</li> <li>Runtime warnings: Deprecated commands emit <code>E_USER_DEPRECATED</code> notices (for PHP consumers) and print a warning banner on stdout identifying the preferred replacement.</li> <li>Alias lifetime: When renaming commands, maintain the legacy alias for at least one minor release. The alias delegates to the new implementation and surfaces the warning banner described above.</li> <li>Removal: Once the grace period lapses, remove the alias in a minor release only if a major version bump is imminent; otherwise, defer removal to the next major release to preserve semver guarantees.</li> <li>Verification: Update or add PHPUnit coverage alongside the change. Contract tests in <code>tests/Console/</code> should assert both the warning copy and the exit codes for deprecated paths before promotion.</li> </ol>"},{"location":"cli/#testing-hooks","title":"Testing hooks","text":"<ul> <li><code>http.serve</code>, <code>queue.work</code>, <code>routes.show</code>, and <code>dev.watch</code> are covered by PHPUnit suites under <code>tests/Console/</code>. These tests lock the emitted banners, option parsing, and integration points documented above.</li> <li>Remaining commands are flagged as contract gaps; track additions in the roadmap and extend the suite as they stabilise.</li> <li>When adding new commands, include fixtures or smoke scripts that exercise their happy path, and wire them into <code>composer test</code> to keep the freeze enforceable.</li> </ul>"},{"location":"cli/#authjwtsetup","title":"<code>auth.jwt.setup</code>","text":"<ul> <li>Purpose: Publish JWT authentication scaffolding so new projects have login endpoints and a seeded user store.</li> <li>Inputs:</li> <li>No flags today. Operates relative to the project root.</li> <li>Outputs &amp; exit codes:</li> <li>Generates an <code>AUTH_JWT_SECRET</code> in <code>.env</code> when missing, printing <code>Generated AUTH_JWT_SECRET in .env.</code> (exit code <code>0</code>).</li> <li>When the secret already exists, prints <code>AUTH_JWT_SECRET already present; leaving existing value.</code> (exit code <code>0</code>).</li> <li>Always prints <code>JWT authentication scaffolding is ready to use.</code> when the run completes successfully.</li> <li>Side effects:</li> <li>Creates <code>etc/auth.php</code> if absent by copying <code>stubs/auth/jwt-auth.php</code>.</li> <li>Seeds <code>var/auth/users.json</code> with an <code>admin</code> user (password <code>password</code>) when the JSON driver is active and the store is empty, leaving non-JSON backends untouched so you can apply migrations manually.</li> <li>Writes driver-specific configuration (JSON, MySQL, PostgreSQL, Firebase, NoSQL) to <code>etc/auth.php</code> based on <code>AUTH_JWT_STORAGE_DRIVER</code> and related environment variables.</li> <li>Registers <code>Bamboo\\Auth\\Jwt\\JwtAuthModule</code> in <code>etc/modules.php</code> if it is not already listed.</li> <li>Writes a random 64-character hex secret to <code>.env</code> when <code>AUTH_JWT_SECRET</code> is missing.</li> <li>Full walkthrough: JWT Authentication CLI Toolkit.</li> <li>Guardrails: <code>tests/Console/AuthJwtSetupCommandTest.php</code> covers secret generation, module registration, and idempotent user store seeding.</li> </ul>"},{"location":"cli/#cachepurge_1","title":"<code>cache.purge</code>","text":""},{"location":"cli/jwt-auth-toolkit/","title":"JWT Authentication CLI Toolkit","text":"<p>Bamboo ships a JWT authentication starter that is provisioned by the <code>auth.jwt.setup</code> console command. This guide walks through what the command does, how to verify the generated scaffolding, and which knobs you can tune after the initial bootstrap.</p>"},{"location":"cli/jwt-auth-toolkit/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Bamboo application installed locally.</li> <li>PHP CLI access to run <code>php bin/bamboo</code> commands from the project root.</li> <li>File system write permissions so the command can manage <code>.env</code>, <code>etc/</code>, and <code>var/</code> artifacts.</li> </ul>"},{"location":"cli/jwt-auth-toolkit/#running-the-setup-command","title":"Running the setup command","text":"<p>Execute the setup command from the root of your project:</p> <pre><code>php bin/bamboo auth.jwt.setup\n</code></pre> <p>On success the command exits with code <code>0</code> and prints a checklist of the work it performed, followed by <code>JWT authentication scaffolding is ready to use.</code>\u3010F:src/Console/Command/AuthJwtSetup.php\u2020L31-L87\u3011</p> <p>Tip: The command is idempotent. You can rerun it at any time to ensure configuration drift has not occurred. Existing secrets, module registrations, and populated user stores are left intact.\u3010F:src/Console/Command/AuthJwtSetup.php\u2020L34-L87\u3011\u3010F:tests/Console/AuthJwtSetupCommandTest.php\u2020L40-L76\u3011</p>"},{"location":"cli/jwt-auth-toolkit/#artifacts-created-by-the-toolkit","title":"Artifacts created by the toolkit","text":"<p>When you run <code>auth.jwt.setup</code>, Bamboo prepares the following assets:</p> Artifact Purpose Location JWT secret Adds a random 64-character secret to <code>.env</code> (creating the file from <code>.env.example</code> if needed). Used for signing issued tokens. <code>.env</code> via <code>AUTH_JWT_SECRET</code> Auth config Publishes the JWT configuration stub that drives the module. <code>etc/auth.php</code> User store Creates a JSON user repository (default) and seeds an <code>admin</code> user (<code>password</code>). Alternate drivers (MySQL, PostgreSQL, Firebase, NoSQL) are scaffolded via configuration. JSON: <code>var/auth/users.json</code> (configurable) Module registration Ensures the <code>JwtAuthModule</code> is registered so routes and middleware load. <code>etc/modules.php</code> <p>The setup command writes the env secret, copies the configuration stub, seeds the user store when empty, and registers the module if it is not already present.\u3010F:src/Console/Command/AuthJwtSetup.php\u2020L52-L233\u3011 The JSON user store is only seeded when the file is missing or blank, preventing accidental overwrites of real accounts, while alternate drivers are left untouched so you can manage migrations externally.\u3010F:src/Console/Command/AuthJwtSetup.php\u2020L108-L233\u3011</p> <p>Set <code>AUTH_JWT_STORAGE_DRIVER</code> to <code>mysql</code>, <code>pgsql</code>, <code>firebase</code>, or <code>nosql</code> before running the command to tailor <code>etc/auth.php</code> to your preferred backend. The generated configuration includes connection placeholders and schema guidance for each driver, while continuing to default to the JSON file store when unset.\u3010F:stubs/auth/jwt-auth.php\u2020L20-L181\u3011\u3010F:etc/auth.php\u2020L20-L181\u3011</p>"},{"location":"cli/jwt-auth-toolkit/#default-routes-and-behaviour","title":"Default routes and behaviour","text":"<p>Registering the <code>JwtAuthModule</code> wires three HTTP endpoints into your application:</p> Method &amp; path Handler Notes <code>POST /api/auth/register</code> <code>AuthController::register</code> Optional\u2014honours the <code>auth.jwt.registration.enabled</code> flag. Returns a token and sanitized user payload after creating the account. <code>POST /api/auth/login</code> <code>AuthController::login</code> Validates credentials and issues a signed JWT containing the user name and roles. <code>GET /api/auth/profile</code> <code>AuthController::profile</code> Protected by the <code>auth.jwt</code> middleware alias. Returns the authenticated user and decoded claims. <p>These routes are registered during module boot, and the middleware alias <code>auth.jwt</code> becomes available for protecting additional routes in your project.\u3010F:src/Auth/Jwt/JwtAuthModule.php\u2020L31-L75\u3011 Requests hitting the controller use the JSON user repository and token service that were bound in the service container.\u3010F:src/Auth/Jwt/AuthController.php\u2020L11-L120\u3011</p>"},{"location":"cli/jwt-auth-toolkit/#verifying-the-setup","title":"Verifying the setup","text":"<p>After running the setup command:</p> <ol> <li>Start the HTTP server (<code>php bin/bamboo http.serve</code>).</li> <li>Make a login request with the seeded admin user:    <pre><code>curl -X POST http://localhost:8080/api/auth/login \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"username\":\"admin\",\"password\":\"password\"}'\n</code></pre></li> <li>Copy the <code>token</code> value from the response and call the profile endpoint:    <pre><code>curl http://localhost:8080/api/auth/profile \\\n  -H 'Authorization: Bearer &lt;token&gt;'\n</code></pre></li> <li>Confirm the response contains the sanitized user payload and <code>claims</code> extracted from the JWT.\u3010F:src/Auth/Jwt/AuthController.php\u2020L57-L118\u3011</li> </ol> <p>If you enabled registration, you can exercise the register endpoint with the same pattern. Duplicate usernames receive a <code>409</code> response, and malformed payloads are rejected with descriptive error codes.\u3010F:src/Auth/Jwt/AuthController.php\u2020L25-L56\u3011</p>"},{"location":"cli/jwt-auth-toolkit/#configuration-knobs","title":"Configuration knobs","text":"<p>All JWT settings are stored in <code>etc/auth.php</code>, which reads defaults from environment variables. Key options include:</p> <ul> <li><code>AUTH_JWT_SECRET</code> \u2013 signing key used by <code>JwtTokenService</code>; rotate this in production deployments.\u3010F:stubs/auth/jwt-auth.php\u2020L5-L38\u3011\u3010F:src/Auth/Jwt/JwtAuthModule.php\u2020L19-L40\u3011</li> <li><code>AUTH_JWT_TTL</code> \u2013 token lifetime in seconds (default <code>3600</code>).\u3010F:stubs/auth/jwt-auth.php\u2020L10-L33\u3011\u3010F:src/Auth/Jwt/JwtAuthModule.php\u2020L23-L34\u3011</li> <li><code>AUTH_JWT_ISSUER</code> / <code>AUTH_JWT_AUDIENCE</code> \u2013 metadata included in tokens for validation.\u3010F:stubs/auth/jwt-auth.php\u2020L14-L33\u3011\u3010F:src/Auth/Jwt/JwtAuthModule.php\u2020L23-L34\u3011</li> <li><code>AUTH_JWT_STORAGE_DRIVER</code> \u2013 selects the user repository backend (<code>json</code>, <code>mysql</code>, <code>pgsql</code>, <code>firebase</code>, <code>nosql</code>). The generated configuration surfaces connection placeholders and schema guidance for each driver while defaulting to JSON when unset.\u3010F:stubs/auth/jwt-auth.php\u2020L20-L181\u3011\u3010F:etc/auth.php\u2020L20-L181\u3011</li> <li><code>AUTH_JWT_USER_STORE</code> \u2013 path to the JSON store when the JSON driver is active; point this to shared storage in clustered environments.\u3010F:stubs/auth/jwt-auth.php\u2020L20-L44\u3011\u3010F:src/Auth/Jwt/JwtAuthModule.php\u2020L15-L28\u3011</li> <li>Driver-specific environment variables populate the nested configuration:</li> <li>MySQL: <code>AUTH_JWT_MYSQL_DSN</code>, <code>AUTH_JWT_MYSQL_USERNAME</code>, <code>AUTH_JWT_MYSQL_PASSWORD</code>, <code>AUTH_JWT_MYSQL_TABLE</code>.\u3010F:stubs/auth/jwt-auth.php\u2020L40-L89\u3011</li> <li>PostgreSQL: <code>AUTH_JWT_PGSQL_DSN</code>, <code>AUTH_JWT_PGSQL_USERNAME</code>, <code>AUTH_JWT_PGSQL_PASSWORD</code>, <code>AUTH_JWT_PGSQL_TABLE</code>.\u3010F:stubs/auth/jwt-auth.php\u2020L91-L127\u3011</li> <li>Firebase: <code>AUTH_JWT_FIREBASE_CREDENTIALS</code>, <code>AUTH_JWT_FIREBASE_DATABASE_URL</code>, <code>AUTH_JWT_FIREBASE_COLLECTION</code>.\u3010F:stubs/auth/jwt-auth.php\u2020L129-L152\u3011</li> <li>NoSQL document stores: <code>AUTH_JWT_NOSQL_CONNECTION</code>, <code>AUTH_JWT_NOSQL_DATABASE</code>, <code>AUTH_JWT_NOSQL_COLLECTION</code>.\u3010F:stubs/auth/jwt-auth.php\u2020L154-L181\u3011</li> <li><code>AUTH_JWT_ALLOW_REGISTRATION</code> \u2013 toggles the <code>/register</code> endpoint. The controller checks this flag before accepting new accounts.\u3010F:stubs/auth/jwt-auth.php\u2020L26-L37\u3011\u3010F:src/Auth/Jwt/AuthController.php\u2020L33-L55\u3011</li> </ul> <p>Updating the env variables and reloading your server is enough\u2014the module resolves configuration at runtime.</p>"},{"location":"cli/jwt-auth-toolkit/#maintaining-the-user-store","title":"Maintaining the user store","text":"<p>By default user records live in a JSON array with bcrypt password hashes. The setup command seeds an admin user with a random ID, email placeholder, and <code>admin</code> role metadata.\u3010F:src/Console/Command/AuthJwtSetup.php\u2020L108-L233\u3011 When you switch drivers, apply the schema guidance in <code>etc/auth.php</code> to your database and seed records using your preferred tooling.\u3010F:etc/auth.php\u2020L20-L181\u3011</p> <p>To manage real accounts:</p> <ul> <li>Replace the default password immediately after bootstrapping.</li> <li>Use the <code>/register</code> endpoint or edit the JSON file directly (remember to hash passwords with <code>password_hash()</code> if you script changes).</li> <li>Backup and secure the user store when deploying to shared environments.</li> </ul>"},{"location":"cli/jwt-auth-toolkit/#rerunning-the-toolkit-safely","title":"Rerunning the toolkit safely","text":"<p>Rerunning <code>php bin/bamboo auth.jwt.setup</code> performs drift correction without deleting existing users:</p> <ul> <li>The command respects existing <code>AUTH_JWT_SECRET</code> values, only generating a new secret when the entry is missing or blank.\u3010F:src/Console/Command/AuthJwtSetup.php\u2020L72-L105\u3011</li> <li>User stores that already contain data are preserved, and non-JSON backends are never mutated by the command.\u3010F:src/Console/Command/AuthJwtSetup.php\u2020L108-L233\u3011</li> <li>Module registration is skipped when <code>JwtAuthModule</code> is already listed.\u3010F:src/Console/Command/AuthJwtSetup.php\u2020L304-L347\u3011</li> </ul> <p>This makes the command safe to wire into provisioning scripts, CI smoke tests, or recovery playbooks.</p>"},{"location":"cli/jwt-auth-toolkit/#next-steps","title":"Next steps","text":"<ul> <li>Enforce HTTPS and secure token storage (for example, using <code>Authorization</code> headers in front-end clients).</li> <li>Extend the controller or middleware to add refresh tokens, revoke lists, or role-based access checks.</li> <li>Add contract tests that exercise your custom routes with the <code>auth.jwt</code> middleware to prevent regressions.</li> </ul> <p>With the CLI toolkit in place you can ship JWT-protected APIs from a fresh Bamboo install in minutes.</p>"},{"location":"configuration/overview/","title":"Configuration Schema Overview (v1.0 Contract)","text":"<p>Bamboo treats every file under <code>etc/</code> as part of the stable contract. The following tables document each schema, default values, and environment overrides for the v1.0 release. Use <code>composer validate:config</code> (which calls <code>php bin/bamboo config.validate</code>) to catch drift before deploying.</p>"},{"location":"configuration/overview/#quick-reference","title":"Quick reference","text":"File Purpose <code>etc/app.php</code> Application identity, environment flags, log destination. <code>etc/server.php</code> OpenSwoole HTTP server host, port, worker counts, static file toggle. <code>etc/cache.php</code> Cache directory and route cache path. <code>etc/middleware.php</code> Global, group, and alias definitions for HTTP middleware. <code>etc/modules.php</code> Ordered list of application modules to boot. <code>etc/redis.php</code> Redis connection string and queue name. <code>etc/database.php</code> Optional database connection definitions. <code>etc/http.php</code> HTTP client defaults and named service endpoints. <code>etc/view.php</code> View engine defaults, per-page overrides, and driver definitions. <code>etc/metrics.php</code> Prometheus namespace, storage driver, histogram buckets. <code>etc/resilience.php</code> Request timeouts, circuit breaker thresholds, health checks. <code>etc/ws.php</code> WebSocket server host and port. <code>etc/auth.php</code> JWT authentication defaults and user store configuration."},{"location":"configuration/overview/#schema-details","title":"Schema details","text":""},{"location":"configuration/overview/#etcappphp","title":"<code>etc/app.php</code>","text":"Key Type Default Environment override <code>name</code> string <code>Bamboo</code> <code>APP_NAME</code> <code>env</code> string <code>local</code> <code>APP_ENV</code> <code>debug</code> bool <code>true</code> <code>APP_DEBUG</code> (parsed as boolean) <code>key</code> string empty string <code>APP_KEY</code> <code>log_file</code> string <code>var/log/app.log</code> <code>LOG_FILE</code> <p>When <code>debug</code> is disabled, <code>app.key</code> must contain a non-empty secret; the configuration validator enforces this requirement.</p>"},{"location":"configuration/overview/#etcserverphp","title":"<code>etc/server.php</code>","text":"Key Type Default Environment override <code>host</code> string <code>127.0.0.1</code> <code>HTTP_HOST</code> <code>port</code> int <code>9501</code> <code>HTTP_PORT</code> <code>workers</code> int CPU count <code>HTTP_WORKERS</code> (<code>auto</code> uses detected CPU cores) <code>task_workers</code> int <code>0</code> <code>TASK_WORKERS</code> <code>max_requests</code> int <code>10000</code> <code>MAX_REQUESTS</code> <code>static_enabled</code> bool <code>true</code> <code>STATIC_ENABLED</code>"},{"location":"configuration/overview/#etccachephp","title":"<code>etc/cache.php</code>","text":"Key Type Default Notes <code>path</code> string <code>var/cache</code> Directory for application cache artifacts. <code>routes</code> string <code>var/cache/routes.cache.php</code> Route cache produced by <code>routes.cache</code>."},{"location":"configuration/overview/#etcmiddlewarephp","title":"<code>etc/middleware.php</code>","text":"<p>Returns an associative array with optional <code>global</code>, <code>groups</code>, and <code>aliases</code> entries. Each value must resolve to fully-qualified class names or alias strings. Modules append to these arrays via <code>ModuleInterface::middleware</code>. See the router contract for ordering semantics.</p>"},{"location":"configuration/overview/#etcmodulesphp","title":"<code>etc/modules.php</code>","text":"<p>Returns a list of module class names implementing <code>Bamboo\\Module\\ModuleInterface</code>. Modules are loaded in order and participate in the lifecycle described in <code>docs/modules.md</code>.</p>"},{"location":"configuration/overview/#etcredisphp","title":"<code>etc/redis.php</code>","text":"Key Type Default Environment override <code>url</code> string <code>tcp://127.0.0.1:6379</code> <code>REDIS_URL</code> <code>queue</code> string <code>jobs</code> <code>REDIS_QUEUE</code>"},{"location":"configuration/overview/#etcdatabasephp","title":"<code>etc/database.php</code>","text":"<p>Optional. When present it must provide a <code>default</code> connection key and a <code>connections</code> map. The stock template configures a MySQL connection using environment variables <code>DB_CONNECTION</code>, <code>DB_HOST</code>, <code>DB_PORT</code>, <code>DB_DATABASE</code>, <code>DB_USERNAME</code>, and <code>DB_PASSWORD</code>.</p>"},{"location":"configuration/overview/#etchttpphp","title":"<code>etc/http.php</code>","text":"Key Type Description <code>default.timeout</code> float Per-request timeout in seconds. <code>default.headers</code> array Key/value pairs applied to every outbound request. <code>default.retries.max</code> int Maximum retry attempts for retriable status codes. <code>default.retries.base_delay_ms</code> int Exponential backoff base delay in milliseconds. <code>default.retries.status_codes</code> array HTTP status codes that trigger a retry. <code>services</code> array Named services with overrides such as <code>base_uri</code> and <code>timeout</code>."},{"location":"configuration/overview/#etcviewphp","title":"<code>etc/view.php</code>","text":"Key Type Default Notes <code>default</code> string <code>components</code> Engine resolved when no per-page override is configured. <code>pages.landing</code> string|null <code>null</code> Optional override for the landing route; must reference an engine name when set. <code>engines.*.driver</code> string varies Maps engine names to driver identifiers consumed by the template manager. <p><code>TemplateEngineManager</code> reads this file to decide which renderer should produce HTML for the landing page and any future view surfaces. Custom drivers can be registered in service providers or bootstrap scripts via <code>TemplateEngineManager::extend()</code>; setting <code>view.default</code> or per-page overrides to those names will switch Bamboo to your preferred templating engine without touching route handlers.\u3010F:etc/view.php\u2020L1-L12\u3011\u3010F:src/Web/View/Engine/TemplateEngineManager.php\u2020L7-L93\u3011\u3010F:src/Web/View/LandingPageContent.php\u2020L6-L117\u3011</p>"},{"location":"configuration/overview/#etcmetricsphp","title":"<code>etc/metrics.php</code>","text":"Key Type Default Environment override <code>namespace</code> string <code>bamboo</code> <code>BAMBOO_METRICS_NAMESPACE</code> (not set by default) <code>storage.driver</code> string <code>swoole_table</code> <code>BAMBOO_METRICS_STORAGE</code> <code>storage.swoole_table.value_rows</code> int <code>16384</code> \u2014 <code>storage.swoole_table.string_rows</code> int <code>2048</code> \u2014 <code>storage.swoole_table.string_size</code> int <code>4096</code> \u2014 <code>storage.apcu.prefix</code> string <code>bamboo_prom</code> <code>BAMBOO_METRICS_APCU_PREFIX</code> <code>histogram_buckets</code> array&gt; Default buckets keyed by metric name."},{"location":"configuration/overview/#etcresiliencephp","title":"<code>etc/resilience.php</code>","text":"Key Type Default Environment override <code>timeouts.default</code> float <code>3.0</code> <code>BAMBOO_HTTP_TIMEOUT_DEFAULT</code> <code>timeouts.per_route</code> array&lt;string, float array&gt; <code>['GET /api/httpbin' =&gt; ['timeout' =&gt; 20.0]]</code> <code>circuit_breaker.enabled</code> bool <code>true</code> <code>BAMBOO_CIRCUIT_BREAKER_ENABLED</code> <code>circuit_breaker.failure_threshold</code> int <code>5</code> <code>BAMBOO_CIRCUIT_BREAKER_FAILURES</code> <code>circuit_breaker.success_threshold</code> int <code>1</code> <code>BAMBOO_CIRCUIT_BREAKER_SUCCESS</code> <code>circuit_breaker.cooldown_seconds</code> float <code>30.0</code> <code>BAMBOO_CIRCUIT_BREAKER_COOLDOWN</code> <code>circuit_breaker.per_route</code> array <code>[]</code> \u2014 <code>health.dependencies</code> array <code>[]</code> \u2014 <p>Per-route overrides accept either a scalar timeout or an array with keys such as <code>timeout</code>, <code>enabled</code>, and thresholds mirroring the default circuit breaker settings. The stock configuration ships with a <code>GET /api/httpbin</code> override set to 20 seconds so the sample concurrent HTTP client endpoint remains usable even when OpenSwoole coroutine wait groups are unavailable.</p>"},{"location":"configuration/overview/#etcwsphp","title":"<code>etc/ws.php</code>","text":"Key Type Default Environment override <code>host</code> string <code>127.0.0.1</code> <code>WS_HOST</code> <code>port</code> int <code>9502</code> <code>WS_PORT</code>"},{"location":"configuration/overview/#etcauthphp","title":"<code>etc/auth.php</code>","text":"Key Type Default Environment override <code>jwt.secret</code> string empty string <code>AUTH_JWT_SECRET</code> <code>jwt.ttl</code> int <code>3600</code> <code>AUTH_JWT_TTL</code> <code>jwt.issuer</code> string <code>Bamboo</code> <code>AUTH_JWT_ISSUER</code> <code>jwt.audience</code> string <code>BambooUsers</code> <code>AUTH_JWT_AUDIENCE</code> <code>jwt.storage.driver</code> string <code>json</code> <code>AUTH_JWT_STORAGE_DRIVER</code> <code>jwt.storage.path</code> string <code>var/auth/users.json</code> (JSON driver) <code>AUTH_JWT_USER_STORE</code> <code>jwt.registration.enabled</code> bool <code>true</code> <code>AUTH_JWT_ALLOW_REGISTRATION</code> <code>jwt.registration.default_roles</code> array <code>[]</code> \u2014 <p>When deploying authentication in production, ensure <code>AUTH_JWT_SECRET</code> is set before turning off <code>app.debug</code>. The <code>auth.jwt.setup</code> CLI command generates a secret, publishes this configuration file, and seeds a starter JSON user store while leaving alternate drivers untouched so you can run migrations separately.\u3010F:src/Console/Command/AuthJwtSetup.php\u2020L52-L233\u3011</p> <p>Driver-specific environment variables populate the nested <code>jwt.storage.drivers</code> configuration. MySQL and PostgreSQL entries include DSNs, credentials, table names, and sample schema definitions; Firebase and generic NoSQL entries surface credential paths, collection names, and document shapes.\u3010F:etc/auth.php\u2020L20-L181\u3011</p>"},{"location":"configuration/overview/#validation-hooks","title":"Validation hooks","text":"<ul> <li><code>Bamboo\\Core\\ConfigValidator</code> enforces the schema above. It raises   <code>ConfigurationException</code> with aggregated error messages when constraints are   violated.</li> <li><code>php bin/bamboo config.validate</code> runs the validator against the current   configuration tree and prints the result. The Composer alias   <code>composer validate:config</code> is suitable for CI pipelines.</li> <li>PHPUnit coverage in <code>tests/Core/ConfigValidatorTest.php</code> and   <code>tests/Console/ConfigValidateCommandTest.php</code> guards the validator behaviour.</li> </ul>"},{"location":"configuration/overview/#migration-and-deprecation-policy","title":"Migration and deprecation policy","text":"<ul> <li>Renaming configuration keys requires a one-minor-release compatibility window.   During the window, code must read both the legacy and the new key while   emitting <code>E_USER_DEPRECATED</code> notices when the legacy key is used.</li> <li>Removing configuration files or sections is a breaking change and must be   reserved for major releases.</li> <li>New configuration files should ship with validation logic and documentation   updates across <code>docs/configuration/</code>, the upgrade guide, and the CLI reference.</li> <li>Operators should rerun <code>composer validate:config</code> after every upgrade and before   deploying to catch missing env vars or schema drift.</li> </ul>"},{"location":"configuration/overview/#configuration-schema-overview-v10-contract_1","title":"Configuration Schema Overview (v1.0 Contract)","text":"<p>Bamboo loads every PHP array under <code>etc/</code> through <code>Bamboo\\Core\\Config</code>, normalising the results into a single tree that backs the <code>config()</code> helper and module bootstrap sequence.\u3010F:src/Core/Config.php\u2020L5-L107\u3011 Runtime validation happens during bootstrap via <code>Bamboo\\Core\\ConfigValidator</code>, so schema changes must remain in lock-step with that guardrail and its PHPUnit coverage.\u3010F:bootstrap/app.php\u2020L10-L30\u3011\u3010F:tests/Core/ConfigValidatorTest.php\u2020L10-L220\u3011</p>"},{"location":"configuration/overview/#loader-behaviour-and-defaults","title":"Loader behaviour and defaults","text":"<ul> <li><code>Config::loadConfiguration()</code> requires <code>etc/app.php</code>, <code>server.php</code>, <code>cache.php</code>,   <code>redis.php</code>, <code>ws.php</code>, and <code>http.php</code>. Optional files (<code>database.php</code>,   <code>middleware.php</code>, <code>metrics.php</code>, and <code>resilience.php</code>) fall back to sensible   defaults when missing to keep new projects bootable.\u3010F:src/Core/Config.php\u2020L83-L107\u3011</li> <li>When the metrics or resilience configuration files are absent, Bamboo injects   in-memory Prometheus storage and baseline timeout/circuit-breaker settings so   observability and safeguards still work in local development environments.\u3010F:src/Core/Config.php\u2020L89-L107\u3011</li> <li>When <code>etc/view.php</code> is missing Bamboo falls back to the built-in   <code>components</code> driver so the landing page keeps rendering without extra   setup.\u3010F:src/Core/Config.php\u2020L83-L107\u3011\u3010F:etc/view.php\u2020L1-L12\u3011</li> <li>Environment variables are read directly inside the configuration files, so the   tables below double as the canonical mapping between <code>.env</code> keys and runtime   behaviour.</li> </ul>"},{"location":"configuration/overview/#etcappphp_1","title":"etc/app.php","text":"Key Type Default Environment variable <code>name</code> string <code>\"Bamboo\"</code> <code>APP_NAME</code> <code>env</code> string <code>\"local\"</code> <code>APP_ENV</code> <code>debug</code> bool <code>true</code> (coerced via <code>FILTER_VALIDATE_BOOLEAN</code>) <code>APP_DEBUG</code> <code>key</code> string empty string <code>APP_KEY</code> <code>log_file</code> string (path) <code>var/log/app.log</code> relative to the project root <code>LOG_FILE</code> <p>Notes</p> <ul> <li><code>ConfigValidator</code> requires <code>app.key</code> to be non-empty whenever <code>app.debug</code> is   <code>false</code> to ensure encrypted cookies and signed payloads remain safe in   production environments.\u3010F:tests/Core/ConfigValidatorTest.php\u2020L62-L86\u3011</li> </ul>"},{"location":"configuration/overview/#etcserverphp_1","title":"etc/server.php","text":"Key Type Default Environment variable <code>host</code> non-empty string <code>\"127.0.0.1\"</code> <code>HTTP_HOST</code> <code>port</code> integer 1\u201365535 <code>9501</code> <code>HTTP_PORT</code> <code>workers</code> positive integer CPU core count (auto-detected) <code>HTTP_WORKERS</code> (<code>\"auto\"</code> keeps detection) <code>task_workers</code> integer \u2265 0 <code>0</code> <code>TASK_WORKERS</code> <code>max_requests</code> integer \u2265 1 <code>10000</code> <code>MAX_REQUESTS</code> <code>static_enabled</code> bool <code>true</code> <code>STATIC_ENABLED</code> <p>Notes</p> <ul> <li>Worker auto-scaling calls OpenSwoole helpers (or <code>nproc</code>) during bootstrap, so   container images must allow that detection step to execute.\u3010F:etc/server.php\u2020L3-L18\u3011</li> <li>Validation enforces that <code>server.host</code> is non-empty and the port falls within   the TCP range before the HTTP server starts listening.\u3010F:tests/Core/ConfigValidatorTest.php\u2020L18-L41\u3011</li> </ul>"},{"location":"configuration/overview/#etcwsphp_1","title":"etc/ws.php","text":"Key Type Default Environment variable <code>host</code> non-empty string <code>\"127.0.0.1\"</code> <code>WS_HOST</code> <code>port</code> integer 1\u201365535 <code>9502</code> <code>WS_PORT</code>"},{"location":"configuration/overview/#etcauthphp_1","title":"etc/auth.php","text":"Key Type Default Environment variable <code>jwt.secret</code> string <code>\"\"</code> <code>AUTH_JWT_SECRET</code> <code>jwt.ttl</code> positive integer <code>3600</code> <code>AUTH_JWT_TTL</code> <code>jwt.issuer</code> string <code>\"Bamboo\"</code> <code>AUTH_JWT_ISSUER</code> <code>jwt.audience</code> string <code>\"BambooUsers\"</code> <code>AUTH_JWT_AUDIENCE</code> <code>jwt.storage.driver</code> string <code>\"json\"</code> <code>AUTH_JWT_STORAGE_DRIVER</code> <code>jwt.storage.path</code> string (path) <code>\"var/auth/users.json\"</code> (JSON driver) <code>AUTH_JWT_USER_STORE</code> <code>jwt.registration.enabled</code> bool <code>true</code> <code>AUTH_JWT_ALLOW_REGISTRATION</code> <code>jwt.registration.default_roles</code> array <code>[]</code> \u2014 <p>Notes</p> <ul> <li>The scaffolded <code>auth.jwt.setup</code> command publishes this configuration, ensures   <code>AUTH_JWT_SECRET</code> is generated, and seeds a default <code>admin</code> user when the JSON   driver is active. Alternate drivers are left untouched so you can apply the   included schema guidance yourself. Rotate the secret whenever credentials   change to invalidate old tokens.\u3010F:src/Console/Command/AuthJwtSetup.php\u2020L52-L233\u3011\u3010F:etc/auth.php\u2020L20-L181\u3011</li> <li>Driver-specific environment variables feed the nested storage definitions:   MySQL and PostgreSQL include DSNs, credentials, and SQL schema stubs, while   Firebase and generic NoSQL entries surface credential locations and document   structures.\u3010F:etc/auth.php\u2020L20-L181\u3011</li> <li>When <code>app.debug</code> is disabled, the configuration validator requires   <code>jwt.secret</code> to be non-empty, mirroring the enforcement applied to   <code>app.key</code>.</li> </ul>"},{"location":"configuration/overview/#etccachephp_1","title":"etc/cache.php","text":"Key Type Default Environment variable <code>path</code> string (directory) <code>var/cache</code> relative to the project root \u2014 <code>routes</code> string (file path) <code>var/cache/routes.cache.php</code> relative to the project root \u2014 <p>Notes</p> <ul> <li><code>ConfigValidator</code> guarantees that <code>cache.routes</code> is a non-empty string so the   route caching command cannot silently fail when writing to disk.\u3010F:tests/Core/ConfigValidatorTest.php\u2020L42-L55\u3011</li> </ul>"},{"location":"configuration/overview/#etcredisphp_1","title":"etc/redis.php","text":"Key Type Default Environment variable <code>url</code> non-empty string <code>\"tcp://127.0.0.1:6379\"</code> <code>REDIS_URL</code> <code>queue</code> non-empty string <code>\"jobs\"</code> <code>REDIS_QUEUE</code> <p>Notes</p> <ul> <li>Application feature tests seed <code>REDIS_URL</code> with an in-memory driver to assert   queue behaviour end-to-end, so keep the key stable for test fixtures and   operator overrides.\u3010F:tests/Http/ApplicationRoutesTest.php\u2020L20-L74\u3011</li> </ul>"},{"location":"configuration/overview/#etcdatabasephp_1","title":"etc/database.php","text":"Key Type Default Environment variable <code>default</code> string <code>\"mysql\"</code> <code>DB_CONNECTION</code> <code>connections.mysql.driver</code> string <code>\"mysql\"</code> \u2014 <code>connections.mysql.host</code> non-empty string <code>\"127.0.0.1\"</code> <code>DB_HOST</code> <code>connections.mysql.port</code> string/integer <code>\"3306\"</code> <code>DB_PORT</code> <code>connections.mysql.database</code> string <code>\"app\"</code> <code>DB_DATABASE</code> <code>connections.mysql.username</code> string <code>\"root\"</code> <code>DB_USERNAME</code> <code>connections.mysql.password</code> string empty string <code>DB_PASSWORD</code> <code>connections.mysql.charset</code> string <code>\"utf8mb4\"</code> \u2014 <code>connections.mysql.collation</code> string <code>\"utf8mb4_unicode_ci\"</code> \u2014 <p>Notes</p> <ul> <li>The configuration ships a single MySQL connection stub. Additional connections   should use the same nested structure so <code>config('database.connections.*')</code>   remains predictable for packages that extend the database layer.\u3010F:etc/database.php\u2020L3-L16\u3011</li> </ul>"},{"location":"configuration/overview/#etchttpphp_1","title":"etc/http.php","text":"Key Type Default Environment variable <code>default.timeout</code> positive float <code>5.0</code> \u2014 <code>default.headers.User-Agent</code> string <code>\"Bamboo-HTTP/1.0\"</code> \u2014 <code>default.retries.max</code> positive integer <code>2</code> \u2014 <code>default.retries.base_delay_ms</code> integer \u2265 0 <code>150</code> \u2014 <code>default.retries.status_codes</code> list <code>[429, 500, 502, 503, 504]</code> \u2014 <code>services.httpbin.base_uri</code> string (URL) <code>\"https://httpbin.org\"</code> \u2014 <code>services.httpbin.timeout</code> positive float <code>5.0</code> \u2014 <p>Notes</p> <ul> <li><code>ConfigValidator</code> enforces a positive HTTP timeout to prevent zero-delay   requests from overwhelming downstream services.\u3010F:tests/Core/ConfigValidatorTest.php\u2020L56-L79\u3011</li> <li>Additional HTTP client profiles should follow the <code>services.{name}</code> pattern so   dependency injection remains straightforward.</li> </ul>"},{"location":"configuration/overview/#etcmetricsphp_1","title":"etc/metrics.php","text":"Key Type Default Environment variable <code>namespace</code> non-empty string <code>\"bamboo\"</code> \u2014 <code>storage.driver</code> non-empty string <code>\"swoole_table\"</code> <code>BAMBOO_METRICS_STORAGE</code> <code>storage.swoole_table.value_rows</code> positive integer <code>16384</code> \u2014 <code>storage.swoole_table.string_rows</code> positive integer <code>2048</code> \u2014 <code>storage.swoole_table.string_size</code> positive integer <code>4096</code> \u2014 <code>storage.apcu.prefix</code> string <code>\"bamboo_prom\"</code> <code>BAMBOO_METRICS_APCU_PREFIX</code> <code>histogram_buckets.default</code> list <code>[0.05, 0.1, 0.25, 0.5, 1.0, 2.5, 5.0]</code> \u2014 <code>histogram_buckets.bamboo_http_request_duration_seconds</code> list <code>[0.05, 0.1, 0.25, 0.5, 1.0, 2.5, 5.0]</code> \u2014 <p>Notes</p> <ul> <li>The metrics namespace feeds directly into the Prometheus collectors used by   <code>HttpMetrics</code> and <code>CircuitBreakerMetrics</code>, so renaming it will change emitted   timeseries labels.\u3010F:etc/metrics.php\u2020L1-L44\u3011\u3010F:tests/Roadmap/V0_4/TimeoutMiddlewareTest.php\u2020L24-L66\u3011</li> <li>Validation checks that namespace, driver, and bucket arrays are shaped   correctly to catch typos before metrics collection begins.\u3010F:tests/Core/ConfigValidatorTest.php\u2020L88-L165\u3011</li> </ul>"},{"location":"configuration/overview/#etcresiliencephp_1","title":"etc/resilience.php","text":"Key Type Default Environment variable <code>timeouts.default</code> positive float <code>3.0</code> <code>BAMBOO_HTTP_TIMEOUT_DEFAULT</code> (optional) <code>timeouts.per_route</code> array&lt;string, float array{timeout?:float}&gt; empty array <code>circuit_breaker.enabled</code> bool <code>true</code> <code>BAMBOO_CIRCUIT_BREAKER_ENABLED</code> <code>circuit_breaker.failure_threshold</code> positive integer <code>5</code> <code>BAMBOO_CIRCUIT_BREAKER_FAILURES</code> <code>circuit_breaker.cooldown_seconds</code> float \u2265 0 <code>30.0</code> <code>BAMBOO_CIRCUIT_BREAKER_COOLDOWN</code> <code>circuit_breaker.success_threshold</code> positive integer <code>1</code> <code>BAMBOO_CIRCUIT_BREAKER_SUCCESS</code> <code>circuit_breaker.per_route</code> array empty array \u2014 <code>health.dependencies</code> array empty array \u2014 <p>Notes</p> <ul> <li>Timeout and circuit-breaker overrides are keyed by the router's <code>METHOD /path</code>   notation so middleware can map telemetry to specific routes.\u3010F:etc/resilience.php\u2020L6-L26\u3011\u3010F:tests/Roadmap/V0_4/TimeoutMiddlewareTest.php\u2020L24-L85\u3011</li> <li>Validation checks numeric ranges and per-route overrides to prevent   misconfigured resilience policies from reaching production.\u3010F:tests/Core/ConfigValidatorTest.php\u2020L126-L220\u3011</li> </ul>"},{"location":"configuration/overview/#etcmiddlewarephp_1","title":"etc/middleware.php","text":"Key Type Default Environment variable <code>global</code> list Request/metrics/resilience middleware stack \u2014 <code>groups.web</code> list <code>Bamboo\\Web\\Middleware\\SignatureHeader::class</code> \u2014 <code>aliases</code> array empty array \u2014 <p>Notes</p> <ul> <li>Modules contribute additional middleware via <code>Config::mergeMiddleware()</code>, and   the module lifecycle test suite locks in the merge order to protect downstream   applications.\u3010F:etc/middleware.php\u2020L1-L28\u3011\u3010F:src/Core/Config.php\u2020L24-L82\u3011\u3010F:tests/Core/ApplicationModulesTest.php\u2020L23-L60\u3011</li> </ul>"},{"location":"configuration/overview/#etcmodulesphp_1","title":"etc/modules.php","text":"Key Type Default Environment variable root value list&gt; empty list \u2014 <p>Notes</p> <ul> <li><code>bootstrap/app.php</code> fails fast if the file returns anything other than an   array of class strings, ensuring module registration is deterministic during   bootstrap.\u3010F:bootstrap/app.php\u2020L22-L30\u3011</li> </ul>"},{"location":"configuration/overview/#cross-file-considerations","title":"Cross-file considerations","text":"<ul> <li>Middleware and resilience policies are tightly coupled: the default middleware   pipeline wires <code>HttpMetricsCollector</code>, <code>CircuitBreakerMiddleware</code>, and   <code>TimeoutMiddleware</code>, which read from both <code>etc/middleware.php</code> and   <code>etc/resilience.php</code>. Changing one file without updating the other can cause   runtime mismatches in metrics labels or resilience defaults.\u3010F:etc/middleware.php\u2020L17-L28\u3011\u3010F:etc/resilience.php\u2020L6-L26\u3011</li> <li>Queue-heavy routes depend on <code>redis.queue</code> for naming conventions in tests and   background workers. Keep the queue key aligned with any worker configuration or   job dispatch code that reads <code>config('redis.queue')</code>.\u3010F:tests/Http/ApplicationRoutesTest.php\u2020L52-L74\u3011</li> <li>Metrics configuration interacts with route instrumentation; updating histogram   buckets should be coordinated with alert thresholds and any downstream metrics   aggregation pipelines.\u3010F:etc/metrics.php\u2020L31-L41\u3011\u3010F:tests/Roadmap/V0_4/MetricsEndpointTest.php\u2020L18-L44\u3011</li> </ul>"},{"location":"configuration/overview/#validation-and-tooling-roadmap","title":"Validation and tooling roadmap","text":"<ul> <li>Runtime enforcement \u2013 <code>bootstrap/app.php</code> validates configuration on every   bootstrap. All errors are emitted to standard error before the process aborts,   preventing partial boots with invalid settings.\u3010F:bootstrap/app.php\u2020L10-L30\u3011</li> <li>Composer script (planned) \u2013 add a <code>\"validate:config\"</code> script entry to   <code>composer.json</code> that runs <code>php bin/config-validate</code>, a thin wrapper invoking   <code>ConfigValidator</code> against <code>etc/</code>. The script will:</li> <li>bootstrap Composer autoloading;</li> <li>instantiate <code>Config</code> and <code>ConfigValidator</code>;</li> <li>exit with code <code>1</code> when validation fails (after printing aggregated      messages).   Integrate the command into CI pipelines and pre-deploy hooks so operators can   catch schema drift without booting the application.</li> <li>PHPUnit coverage \u2013 <code>tests/Core/ConfigValidatorTest.php</code> exercises all guard   rails, from HTTP timeout ranges to circuit-breaker thresholds, while   <code>tests/Core/ApplicationModulesTest.php</code> verifies middleware merging behaviour   that depends on the configuration tree. Keep new configuration keys backed by   similar tests before marking the schema stable.\u3010F:tests/Core/ConfigValidatorTest.php\u2020L10-L220\u3011\u3010F:tests/Core/ApplicationModulesTest.php\u2020L23-L60\u3011</li> </ul>"},{"location":"configuration/overview/#migration-and-deprecation-policy_1","title":"Migration and deprecation policy","text":"<ul> <li>Key renames \u2013 ship shims that read both the legacy and replacement keys.   Deprecations should emit a log entry when the old key is used and remove the   shim no earlier than the next minor release. Document the overlap window in the   upgrade guide and release notes.</li> <li>Feature-flagged fallbacks \u2013 introduce new behaviour behind opt-in flags.   Keep defaults aligned with previous releases until the feature graduates, then   flip the default in a minor release with clear migration instructions.</li> <li>Communication requirements \u2013 every configuration migration must surface in   release notes, the roadmap tracking issue, and the dedicated upgrade guide   section. When runtime shims log notices, include actionable remediation steps   and links to relevant documentation.</li> <li>Validation alignment \u2013 update <code>ConfigValidator</code> (and its tests) alongside   any schema change. The composer validation command should be updated in the   same pull request so CI immediately guards the new contract.</li> </ul>"},{"location":"roadmap/v0.3-prep/","title":"Bamboo v0.3 Middleware &amp; Module Preparation","text":"<p>This document captures the design notes for the middleware pipeline and module system that will land in the v0.3 release. It is intended to guide feature work before the implementation solidifies so teams can agree on naming, execution order, and container responsibilities.</p>"},{"location":"roadmap/v0.3-prep/#middleware-pipeline-architecture","title":"Middleware pipeline architecture","text":""},{"location":"roadmap/v0.3-prep/#execution-order","title":"Execution order","text":"<ol> <li>Global stack \u2013 middleware defined in <code>etc/middleware.php</code> under the    <code>global</code> key runs for every HTTP request. These entries are resolved out of    the container, allowing dependencies to be injected through constructor    arguments.</li> <li>Grouped layers \u2013 route definitions will reference named groups. Each    group is resolved from the configuration file and merged onto the global    stack in the order the groups are attached to the route. This keeps common    policies (e.g., authentication, throttling) reusable without repeating    class names per route.</li> <li>Route-specific middleware \u2013 ad-hoc middleware declared directly on a    route are appended last so teams can override behaviors on a single endpoint    without mutating global state.</li> <li>Termination hooks \u2013 middleware implementing a <code>terminate()</code> method will    be collected during request execution and invoked after the response is sent    so they can perform cleanup or async dispatching.</li> </ol>"},{"location":"roadmap/v0.3-prep/#grouping-strategy","title":"Grouping strategy","text":"<ul> <li><code>etc/middleware.php</code> will return a keyed array of middleware identifiers.   The top-level keys are <code>global</code>, <code>groups</code>, and <code>aliases</code>.</li> <li>Global middleware lists the always-on stack.</li> <li>Groups are keyed by group name and contain ordered middleware class   strings or alias references. Groups may be nested by referencing other group   names, enabling composition (e.g., <code>web</code> can include <code>session</code> and   <code>csrf</code> groups).</li> <li>Aliases map short handles to class strings so routing declarations stay   readable and avoid hard-coding fully-qualified class names.</li> </ul>"},{"location":"roadmap/v0.3-prep/#container-integration","title":"Container integration","text":"<ul> <li>The HTTP kernel will pull middleware definitions from the resolved   configuration (<code>Bamboo\\Core\\Config</code>).</li> <li>Each middleware entry is resolved through the service container to honour   constructor dependencies.</li> <li>The kernel will cache the expanded stack for each route to avoid rebuilding   the same array on every request. Cache invalidation happens when the route   cache is cleared or when configuration files change.</li> </ul>"},{"location":"roadmap/v0.3-prep/#module-contract","title":"Module contract","text":"<p>Modules expose extension points for the framework. The proposed <code>Bamboo\\Module\\ModuleInterface</code> formalizes how a module registers its services and middleware contributions.</p> <pre><code>namespace Bamboo\\Module;\n\nuse Bamboo\\Core\\Application;\n\ninterface ModuleInterface\n{\n    /**\n     * Register bindings or configuration into the container.\n     */\n    public function register(Application $app): void;\n\n    /**\n     * Perform post-registration boot logic once all modules are loaded.\n     */\n    public function boot(Application $app): void;\n\n    /**\n     * Optionally contribute middleware aliases or stacks.\n     *\n     * @return array&lt;string, array&lt;int, string&gt;|string&gt;\n     */\n    public function middleware(): array;\n}\n</code></pre> <p>Additional optional contracts (such as <code>provides()</code> for deferred loading) can be introduced in later iterations, but the above set keeps the initial API small and focused on container registration.</p>"},{"location":"roadmap/v0.3-prep/#module-registration-flow","title":"Module registration flow","text":"<ol> <li>Modules are declared in <code>etc/modules.php</code> as an ordered list of class names    implementing <code>ModuleInterface</code>.</li> <li>During bootstrap the application resolves the array, iterates through each    module, and calls <code>register()</code> so services, configuration, and bindings are    available before the rest of the framework boots.</li> <li>After all modules have registered, the bootstrapper calls <code>boot()</code> on each    module in registration order. This ensures modules can safely interact with    services from other modules.</li> <li>Middleware contributions returned by <code>middleware()</code> are merged into the    configuration structure loaded from <code>etc/middleware.php</code>, allowing modules to    publish additional aliases or group entries.</li> <li>Future tooling (e.g., <code>bin/bamboo modules.list</code>) can introspect the    configuration and report which modules are active and what middleware they    expose.</li> </ol>"},{"location":"roadmap/v0.3-prep/#configuration-entry-points","title":"Configuration entry points","text":"<ul> <li><code>etc/middleware.php</code> \u2013 placeholder returning an   empty array today. Teams will populate the <code>global</code>, <code>groups</code>, and <code>aliases</code>   keys described above as middleware lands in the codebase.</li> <li><code>etc/modules.php</code> \u2013 placeholder returning an empty   array. Populate it with module class names in the order they should be   registered with the application container.</li> </ul> <p>Link this document in the README so contributors know where the roadmap lives and where to wire upcoming configuration.</p>"},{"location":"roadmap/v0.4-prep/","title":"Bamboo v0.4 Observability &amp; Resilience Preparation","text":"<p>This planning note captures the design targets for the v0.4 release: a Prometheus export surface, resilience middleware, and operational hooks that keep OpenSwoole workers healthy. It establishes contracts before code lands so the middleware pipeline (introduced in v0.3) and the runtime can absorb the changes with minimal refactoring.</p>"},{"location":"roadmap/v0.4-prep/#metrics-http-endpoint","title":"<code>/metrics</code> HTTP endpoint","text":"<ul> <li>The route will respond on <code>GET /metrics</code> and return <code>text/plain; version=0.0.4</code>   (the Prometheus text exposition media type). The handler will be registered   through the router like any other controller so it benefits from request   logging, authentication, or rate limiting middleware when configured.</li> <li><code>Bamboo\\\\Core\\\\ResponseEmitter</code> will emit metric payloads verbatim without   JSON encoding. The handler returns a PSR-7 response with the correct   Content-Type header and buffered body so the existing emitter can stream it   through OpenSwoole without changes.</li> <li>The endpoint will expose process-level counters (requests, errors,   in-flight connections), timers/histograms for request latency, and gauges for   worker state. Instrumentation points will be added in the HTTP kernel and   middleware pipeline to increment/update metrics before the response is emitted.</li> </ul>"},{"location":"roadmap/v0.4-prep/#prometheus-text-format-contract","title":"Prometheus text format contract","text":"<ul> <li>Responses conform to the Prometheus 0.0.4 text exposition format, including   <code># HELP</code>/<code># TYPE</code> preamble lines, snake_case metric names with namespace   prefixes (e.g., <code>bamboo_http_requests_total</code>), and UTF-8 encoded labels.</li> <li>Histograms will include <code>_count</code>, <code>_sum</code>, and bucket lines. Latency buckets will   default to <code>[0.05, 0.1, 0.25, 0.5, 1, 2.5, 5]</code> seconds, configurable through   <code>etc/metrics.php</code>.</li> <li>To avoid per-worker duplication, samples will be aggregated across workers   using a shared storage backend rather than per-request formatting.</li> <li>Error conditions must yield HTTP <code>503</code> responses with an explanatory body so   Prometheus scrape failures are obvious. The collector should degrade   gracefully if storage backends are unavailable (returning <code>503</code> or emitting an   empty body).</li> </ul>"},{"location":"roadmap/v0.4-prep/#metrics-collection-plumbing","title":"Metrics collection plumbing","text":"<ul> <li>Add the Composer dependency <code>promphp/prometheus_client_php:^2.7</code> to obtain the   <code>CollectorRegistry</code>, counters, gauges, and histograms. The project already   requires APCu; the Prometheus client can use its <code>APC</code> adapter for local   development and <code>Redis</code> storage in clustered deployments.</li> <li>A new service provider (or optional <code>bamboo/metrics-prometheus</code> module) will   register the collector registry within the container, expose a middleware to   observe request timing, and provide helper services for custom instrumentation.</li> <li>OpenSwoole workers need a shared collector to avoid per-worker caches. Use the   Prometheus <code>Prometheus\\\\Storage\\\\InMemory</code> driver backed by <code>Swoole\\Table</code> or   Redis to aggregate counts. The bootstrap sequence will initialize the storage   so forked workers inherit the connection/table descriptor.</li> <li>The <code>/metrics</code> handler will pull samples from the registry and write the body   using <code>Prometheus\\\\Renderer\\\\TextFormat</code>. Because the <code>ResponseEmitter</code> streams   raw text, no special casing is required beyond setting the Content-Type header.</li> </ul>"},{"location":"roadmap/v0.4-prep/#timeout-middleware-strategy","title":"Timeout middleware strategy","text":"<ul> <li>Implement a <code>TimeoutMiddleware</code> that wraps the downstream handler in   <code>OpenSwoole\\Coroutine::withTimeout()</code> (or uses <code>Swoole\\Timer::after()</code> fallback   when coroutines are unavailable). When the timeout elapses, it aborts the   request, increments a <code>bamboo_http_timeouts_total</code> counter, and returns a   <code>504</code> response.</li> <li>Configuration for default/global timeouts will live in <code>etc/middleware.php</code>   under a <code>timeouts</code> group so routes can opt in or override with alias syntax   defined in the v0.3 middleware document.</li> <li>The middleware will emit timing data around the downstream call so latencies   are recorded even when the timeout trips. Metrics instrumentation should use   the shared collector registered in the container.</li> </ul>"},{"location":"roadmap/v0.4-prep/#circuit-breaker-middleware-strategy","title":"Circuit breaker middleware strategy","text":"<ul> <li>Introduce a <code>CircuitBreakerMiddleware</code> that monitors upstream failures using a   rolling window stored in <code>Swoole\\Table</code> or APCu. When thresholds are exceeded   (configurable via <code>etc/middleware.php</code>), the middleware short-circuits requests   and returns <code>503 Service Unavailable</code> with a retry-after hint.</li> <li>Middleware ordering matters: circuit breakers must run before expensive work so   they will be placed early in the global stack (before authentication or route   handlers) but after logging so failures are still recorded.</li> <li>State transitions (closed \u2192 open \u2192 half-open) will publish gauges/counters to   Prometheus so operators can correlate breaker activity with upstream outages.</li> </ul>"},{"location":"roadmap/v0.4-prep/#graceful-shutdown-health-checks","title":"Graceful shutdown &amp; health checks","text":"<ul> <li>OpenSwoole exposes <code>on('Shutdown')</code> and <code>on('WorkerExit')</code> hooks. Register   listeners that flush pending metrics, mark workers as unhealthy in the   readiness registry, and close Redis connections. The HTTP server bootstrap   (<code>bootstrap/server.php</code>) will wire these callbacks during application boot.</li> <li>Implement lightweight <code>/healthz</code> (liveness) and <code>/readyz</code> (readiness)   endpoints. The liveness check returns <code>200</code> as long as the worker loop is   running; readiness reports <code>200</code> only when critical dependencies (Redis,   database, Prometheus storage) are reachable.</li> <li>A shared <code>HealthRegistry</code> service will track worker readiness state. It uses a   <code>Swoole\\Table</code> or cache entry updated on start/stop events. The Prometheus   exporter will expose <code>bamboo_worker_ready</code> gauges sourced from this registry.</li> <li>Graceful shutdown will tie into the CLI command <code>http.serve</code> so signals sent to   the managed OpenSwoole server first mark readiness as false, stop accepting new   connections, wait for in-flight requests to complete (observed via the shared   collector), and finally exit.</li> </ul>"},{"location":"roadmap/v0.4-prep/#integration-summary","title":"Integration summary","text":"<ul> <li>Dependencies \u2013 Composer require <code>promphp/prometheus_client_php</code> and enable   Redis or Swoole Table storage. Optional extension: <code>ext-apcu</code> for local   storage.</li> <li>ResponseEmitter \u2013 No functional changes; handlers must return PSR responses   with the correct headers so the emitter can stream metrics text and health   payloads unchanged.</li> <li>Middleware pipeline \u2013 Timeout and circuit breaker middleware will be   registered via <code>etc/middleware.php</code> using the v0.3 alias/group conventions,   ensuring deterministic ordering with other global middleware. Instrumentation   hooks in each middleware feed the shared collector.</li> <li>Operational hooks \u2013 Bootstrap wiring listens for OpenSwoole worker events   to maintain readiness state and flush metrics before exit, while new health   endpoints give orchestrators clear liveness signals.</li> </ul>"},{"location":"roadmap/v1.0-prep/","title":"Bamboo v1.0 API Freeze Preparation","text":"<p>This planning note captures the contract surfaces that must be frozen ahead of the v1.0 milestone and the supporting documentation deliverables that keep the community aligned. Each section highlights the review checkpoints required before cutting the release candidate so breaking changes are surfaced early and compatibility guarantees are explicit.</p>"},{"location":"roadmap/v1.0-prep/#public-api-surfaces-slated-for-freeze","title":"Public API surfaces slated for freeze","text":""},{"location":"roadmap/v1.0-prep/#cli-command-palette","title":"CLI command palette","text":"<p>Bamboo's dot-notation CLI is the operational front door for most users. The freeze ensures command names, required arguments, and structured output remain stable across the 1.x line.</p> <ul> <li>[x] Review the complete command roster (<code>bin/bamboo list</code>) and document       stability levels for each entry (stable, experimental, or internal).</li> <li>[x] Capture input/output contracts for critical commands (<code>http.serve</code>,       <code>routes.cache</code>, <code>queue.work</code>, <code>dev.watch</code>, etc.) in <code>docs/cli/</code> reference       pages before the freeze.</li> <li>[x] Establish guardrails for future additions: new commands require semver       minor releases, and renames must ship with deprecated aliases for at least       one minor release.</li> <li>[x] Publish a CLI deprecation policy in the upgrade guide describing how long       aliases are maintained and how operators are notified (release notes +       runtime warnings).</li> </ul>"},{"location":"roadmap/v1.0-prep/#http-router-contract","title":"HTTP router contract","text":"<p>Routes define the public HTTP surface for applications built on Bamboo. Freezing method matching, parameter binding, and error behaviour gives downstream teams confidence that v1.x upgrades will not break HTTP integrations.</p> <ul> <li>[x] Enumerate supported HTTP methods, route declaration helpers, and parameter       token formats in <code>docs/router.md</code> with code examples.</li> <li>[x] Validate that 404/405/500 response payloads and status codes are covered by       contract tests and describe them in the API docs.</li> <li>[x] Document middleware ordering guarantees (global \u2192 group \u2192 route) and       ensure the behaviour is regression-tested in <code>tests/Router/</code> suites.</li> <li>[x] Define the router deprecation story: route helper removals must emit       <code>E_USER_DEPRECATED</code> notices and remain available through at least v1.(x+1).</li> </ul>"},{"location":"roadmap/v1.0-prep/#module-extension-api","title":"Module extension API","text":"<p>Modules implement <code>Bamboo\\Module\\ModuleInterface</code> to extend the framework. Freezing this contract stabilises how third-party packages integrate with the core container and middleware system.</p> <ul> <li>[x] Audit the module lifecycle (<code>register</code>, <code>boot</code>, <code>middleware</code>) and confirm       no additional hooks are required for the v1.0 baseline. Documented in       <code>docs/modules.md</code> with timing guarantees.</li> <li>[x] Document module discovery and configuration expectations in       <code>docs/modules.md</code>, including examples for publishing middleware aliases and       services.</li> <li>[x] Define semantic-versioning rules for modules: breaking interface changes       require a major release, and optional method additions must provide sane       defaults.</li> <li>[x] Outline the module deprecation policy: interface removals follow a two-step       cycle (deprecated in v1.x, removed no earlier than v2.0) with CHANGELOG and       runtime notices.</li> </ul>"},{"location":"roadmap/v1.0-prep/#configuration-schema","title":"Configuration schema","text":"<p>Configuration files under <code>etc/</code> are treated as part of the public contract for self-hosted deployments. The freeze covers file names, array shapes, and default keys used by the bootstrap sequence.</p> <ul> <li>[x] Produce a schema index in <code>docs/configuration/overview.md</code> summarising       every <code>etc/*.php</code> file, expected keys, and types.</li> <li>[x] Add validation hooks (via <code>composer validate:config</code> script) to detect       missing or malformed keys before runtime (task stub).<ul> <li>[x] Document the <code>composer validate:config</code> plan and existing runtime /     PHPUnit enforcement in <code>docs/configuration/overview.md</code>.</li> <li>[x] Land the Composer script and CI wiring.</li> </ul> </li> <li>[x] Forbid silent renames: configuration key migrations must ship shims that       read both the old and new keys for one minor release (policy captured in       <code>docs/configuration/overview.md</code>).</li> <li>[x] Write the configuration deprecation policy into the upgrade guide,       including examples for feature-flagged fallbacks and migration helpers       (task stub).</li> </ul>"},{"location":"roadmap/v1.0-prep/#documentation-deliverables-for-v10","title":"Documentation deliverables for v1.0","text":""},{"location":"roadmap/v1.0-prep/#upgrade-guide-docsupgradev10md","title":"Upgrade guide (<code>docs/upgrade/v1.0.md</code>)","text":"<ul> <li>[x] Draft step-by-step upgrade instructions covering configuration changes,       CLI contract updates, and deprecations lifted for v1.0.</li> <li>[x] Include a compatibility matrix showing which OpenSwoole and PHP versions       are officially supported.</li> <li>[x] Integrate with the existing static site generator plan (MkDocs) so the       guide renders alongside other <code>docs/</code> content and is published on release       day.</li> </ul>"},{"location":"roadmap/v1.0-prep/#performance-benchmarks-docsbenchmarks","title":"Performance benchmarks (<code>docs/benchmarks/</code>)","text":"<ul> <li>[x] Capture baseline HTTP throughput/latency numbers using the maintained       <code>bin/bench/http</code> harness and document the environment configuration.<ul> <li>[x] Documented the harness workflow, environment prerequisites, and CI     automation in <code>docs/benchmarks/README.md</code>.</li> </ul> </li> <li>[x] Schedule the first cold-cache run on dedicated hardware and commit       the resulting dataset (task stub).</li> <li>[x] Store raw benchmark results (CSV/JSON) under <code>docs/benchmarks/data/</code> for       reproducibility and graph generation.<ul> <li>[x] Established file naming + metadata conventions in     <code>docs/benchmarks/README.md</code>.</li> <li>[x] Land the inaugural dataset + artefacts once baseline runs complete     (see task stub).</li> </ul> </li> <li>[x] Add instructions for regenerating charts using the <code>docs/tools/plot-bench</code>       script (Python + matplotlib) and ensure MkDocs can embed the generated       images.<ul> <li>[x] Implemented <code>docs/tools/plot-bench.py</code> to render charts and Markdown     manifests.</li> <li>[x] Documented MkDocs navigation wiring and chart publication workflow.</li> </ul> </li> </ul>"},{"location":"roadmap/v1.0-prep/#starter-blueprints-docsstarters-readmemd-overview","title":"Starter blueprints (<code>docs/starters/</code> + <code>README.md</code> overview)","text":"<ul> <li>[x] Publish opinionated starter templates (REST API, queue worker, WebSocket       gateway) with <code>composer create-project</code> snippets in <code>docs/starters/</code>.</li> <li>[x] Reference each blueprint from the main <code>README.md</code> so newcomers can pick a       starting point without browsing the full docs site.</li> <li>[x] Provide tooling notes for the static site: enable MkDocs collections to       surface starter cards and wire Netlify (or GitHub Pages) deployment so       updates go live automatically.</li> </ul>"},{"location":"roadmap/v1.0-prep/#release-readiness-tracking","title":"Release readiness tracking","text":"<ul> <li>[x] Cross-link this document from <code>README.md</code> under the roadmap section so the       community can track progress.</li> <li>[x] Review the checklist weekly in milestone syncs and mark completed items to       signal stability.</li> <li>[x] Once all freeze tasks are complete, announce the transition to release       candidate status on the project discussion board and lock further breaking       changes until v2.0 planning begins.</li> </ul>"},{"location":"starters/","title":"Starter Blueprint Hub","text":"<p>This hub documents the officially supported Bamboo starter blueprints and how to operate them in both development and production environments. Each starter is a curated distribution of the framework with guardrails, sample code, and tooling that accelerate focused workloads. Use the guidance below to scaffold a project, configure runtime services, and wire the blueprint into your deployment workflow.</p>"},{"location":"starters/#using-this-guide","title":"Using this guide","text":""},{"location":"starters/#prerequisites","title":"Prerequisites","text":"<ul> <li>PHP 8.4 with OpenSwoole \u2013 install the extensions documented in   <code>docs/Install-Bamboo-PHP84.md</code> before creating a   project.</li> <li>Composer \u2013 run the repository's <code>bootstrap/shell-init.sh</code> script so the   bundled Composer wrapper is available in your <code>PATH</code> and suppresses deprecated   notices during installation.</li> <li>Redis 7+ \u2013 required for the queue worker starter and optional for the REST   API starter's job dispatch examples.</li> <li>Node.js 20+ \u2013 only required when consuming the WebSocket starter's demo   client or bundling TypeScript utilities. The PHP server runs without Node.js.</li> </ul>"},{"location":"starters/#project-bootstrap-workflow","title":"Project bootstrap workflow","text":"<ol> <li><code>eval \"$(./bootstrap/shell-init.sh)\"</code> (from the Bamboo repository or any    starter checkout) to register local tooling shims.</li> <li>Run the <code>composer create-project</code> command for the desired starter.</li> <li>Copy the provided <code>.env.example</code> to <code>.env</code> and update credentials for Redis,    databases, queues, and TLS endpoints.</li> <li>Generate an application key with <code>php bin/bamboo app.key.make</code> when prompted.</li> <li>Start the relevant runtime (<code>http.serve</code>, <code>queue.work</code>, or <code>ws.serve</code>) and    run through the smoke tests documented below.</li> </ol>"},{"location":"starters/#configuration-conventions","title":"Configuration conventions","text":"<ul> <li>Starter configuration files live in <code>etc/</code> just like the main framework. Each   blueprint ships tuned defaults in <code>etc/app.php</code>, <code>etc/server.php</code>,   <code>etc/http.php</code>, and the service-specific files listed in the sections below.</li> <li>Environment variables override configuration values through <code>vlucas/phpdotenv</code>   loading inside the bootstrap sequence. Use <code>.env</code> for secrets and per-machine   overrides; commit baseline settings to version control under <code>etc/</code>.</li> <li>Routes, jobs, and WebSocket handlers are organised under <code>routes/</code>,   <code>app/Jobs/</code>, and <code>app/WebSocket/</code> (or equivalent) to keep scaffolding familiar   across blueprints.</li> </ul>"},{"location":"starters/#rest-api-starter","title":"REST API starter","text":"<p>A batteries-included HTTP API surface with request validation, error handling, OpenAPI generation, and first-party queue dispatch hooks.</p>"},{"location":"starters/#create-a-project","title":"Create a project","text":"<pre><code>eval \"$(./bootstrap/shell-init.sh)\"\ncomposer create-project bamboo/starter-rest my-api\ncd my-api\ncp .env.example .env\nphp bin/bamboo app.key.make\n</code></pre>"},{"location":"starters/#what-ships-in-the-template","title":"What ships in the template","text":"<ul> <li>Route groups under <code>routes/api.php</code> with JSON and streaming responses.</li> <li>Controller skeletons in <code>app/Http/Controllers/</code> using PSR-7 requests and   responses.</li> <li>Request validation middleware powered by <code>respect/validation</code> with sensible   defaults for pagination, UUIDs, and ISO-8601 timestamps.</li> <li>Example feature tests in <code>tests/Feature/</code> asserting authentication guards,   validation failures, and happy-path payloads.</li> <li>Optional Redis-backed job dispatchers demonstrating background email or audit   pipelines.</li> </ul>"},{"location":"starters/#configuration-notes","title":"Configuration notes","text":"<ul> <li>HTTP server \u2013 tune worker counts, coroutine hooks, and static file serving   in <code>etc/server.php</code>. Production deployments should raise the worker count to   match CPU cores and enable <code>open_http2_protocol</code> when terminating TLS upstream.</li> <li>Application metadata \u2013 set the app name, environment, and default locale in   <code>etc/app.php</code>. The starter enables JSON pretty-printing in <code>etc/http.php</code> when   <code>APP_DEBUG=true</code>.</li> <li>Database connections \u2013 configure <code>etc/database.php</code> with your primary   connection. The template ships with SQLite enabled for local smoke tests;   adjust the <code>DB_CONNECTION</code> and <code>DB_URL</code> environment variables for production.</li> <li>API authentication \u2013 the starter provides token guard scaffolding under   <code>etc/auth.php</code> and middleware stubs in <code>app/Http/Middleware/Authenticate.php</code>.   Register your preferred guard (JWT, OAuth, or signed tokens) before shipping.</li> <li>Queues \u2013 toggle queue dispatch by enabling the Redis connection in   <code>etc/redis.php</code> and setting <code>QUEUE_CONNECTION=redis</code> in <code>.env</code>.</li> </ul>"},{"location":"starters/#operational-workflow","title":"Operational workflow","text":"<ul> <li>Run <code>php bin/bamboo http.serve</code> to boot the OpenSwoole HTTP server (defaults to   <code>127.0.0.1:9501</code>).</li> <li>Use <code>php bin/bamboo routes.show</code> to inspect registered endpoints and confirm   that cacheable routes align with your OpenAPI spec.</li> <li>Prime route caches in CI/CD with <code>php bin/bamboo routes.cache</code> and purge caches   via <code>php bin/bamboo cache.purge</code> after deployments.</li> <li>Execute the template's test suite using <code>composer test</code>; it covers controllers,   middleware, and queue dispatch hooks.</li> <li>Generate and publish API documentation by running the included <code>npm run docs</code>   task (if OpenAPI export is enabled) or integrating the generated spec into your   chosen portal.</li> </ul>"},{"location":"starters/#production-checklist","title":"Production checklist","text":"<ul> <li>Front requests with an HTTP proxy (NGINX, Envoy, Traefik) that terminates TLS   and forwards to OpenSwoole over a Unix socket or loopback address.</li> <li>Configure process supervision via systemd or Supervisor with automatic restarts   on failure and graceful reloads on deploy.</li> <li>Enable structured logging in <code>etc/http.php</code> and forward JSON logs to your   observability stack.</li> <li>Monitor latency and saturation using the built-in Prometheus metrics endpoint   (mounted under <code>/metrics</code> when <code>etc/metrics.php['enabled']</code> is true).</li> </ul>"},{"location":"starters/#queue-worker-starter","title":"Queue worker starter","text":"<p>A Redis-backed background worker with opinionated job dispatch patterns, structured logging, and health probes.</p>"},{"location":"starters/#create-a-project_1","title":"Create a project","text":"<pre><code>eval \"$(./bootstrap/shell-init.sh)\"\ncomposer create-project bamboo/starter-queue my-worker\ncd my-worker\ncp .env.example .env\nphp bin/bamboo app.key.make\n</code></pre>"},{"location":"starters/#what-ships-in-the-template_1","title":"What ships in the template","text":"<ul> <li>Job contracts in <code>app/Jobs/</code> demonstrating synchronous and batched handlers.</li> <li>Redis queue dispatcher bound in the service container so controllers can call   <code>queue()-&gt;push()</code> without additional wiring.</li> <li>Worker supervisor configuration samples for systemd, Supervisor, and Horizon.</li> <li>Health check routes that expose queue depth and worker heartbeat information.</li> <li>Integration tests in <code>tests/Queue/</code> verifying job payload serialization and   Redis connectivity.</li> </ul>"},{"location":"starters/#configuration-notes_1","title":"Configuration notes","text":"<ul> <li>Redis connection \u2013 set host, port, and authentication in <code>etc/redis.php</code>.   The starter expects a dedicated queue database (default index <code>1</code>) so metrics   and application caches remain isolated.</li> <li>Queue channel \u2013 adjust the queue name under <code>etc/queue.php['default']</code>. The   worker command reads <code>redis.queue</code> from configuration, so keep names in sync.</li> <li>Job retry policy \u2013 customise retry delays and maximum attempts in   <code>etc/queue.php['retry']</code>. The starter includes exponential backoff helpers you   can reuse across job classes.</li> <li>Telemetry \u2013 enable structured logs by pointing <code>LOG_CHANNEL</code> to <code>stdout</code> in   <code>.env</code> and wiring <code>etc/app.php['logging']</code> to the Monolog JSON formatter.</li> </ul>"},{"location":"starters/#operational-workflow_1","title":"Operational workflow","text":"<ul> <li>Start a local Redis instance (<code>redis-server --save \"\" --appendonly no</code>) before   launching workers.</li> <li>Run <code>php bin/bamboo queue.work</code> to start a long-lived worker. Use <code>--once</code> for   smoke tests or <code>--max-jobs=500</code> during rolling deploys to ensure workers exit   before process managers recycle them.</li> <li>Send test jobs via the bundled <code>php bin/bamboo client.call</code> commands or HTTP   enqueue endpoints. Check the console output for payload traces while   validating.</li> <li>Run <code>composer test</code> to execute integration tests that ensure Redis connectivity   and job handlers function as expected.</li> <li>Configure health probes: the starter exposes <code>/ops/queue-health</code> for HTTP   checks and writes a heartbeat timestamp to Redis. Point Kubernetes liveness and   readiness probes at the HTTP endpoint or configure a CLI probe that evaluates   the heartbeat key.</li> </ul>"},{"location":"starters/#production-checklist_1","title":"Production checklist","text":"<ul> <li>Run at least two worker processes per queue to avoid head-of-line blocking on   long-running jobs. Scale horizontally by duplicating the systemd or Supervisor   unit with different process names.</li> <li>Set <code>--max-jobs</code> or <code>--once</code> flags so rolling deploys drain existing work   before shipping new code.</li> <li>Instrument queue depth with the provided Prometheus collector (<code>queue_depth</code>   gauge) and export logs to your centralised logging provider.</li> <li>Protect Redis with TLS or private networking; if using managed Redis services,   enable <code>REDIS_TLS=true</code> in <code>.env</code> and update <code>etc/redis.php</code> accordingly.</li> </ul>"},{"location":"starters/#websocket-gateway-starter","title":"WebSocket gateway starter","text":"<p>A real-time gateway that layers authentication, channel management, and broadcast helpers on top of OpenSwoole's WebSocket server.</p>"},{"location":"starters/#create-a-project_2","title":"Create a project","text":"<pre><code>eval \"$(./bootstrap/shell-init.sh)\"\ncomposer create-project bamboo/starter-websocket my-gateway\ncd my-gateway\ncp .env.example .env\nphp bin/bamboo app.key.make\n</code></pre>"},{"location":"starters/#what-ships-in-the-template_2","title":"What ships in the template","text":"<ul> <li>Gateway bootstrap in <code>app/WebSocket/Server.php</code> that wires authentication and   channel registration callbacks into OpenSwoole.</li> <li>HTTP handshake routes in <code>routes/websocket.php</code> integrating with the REST API   starter's auth middleware so clients can request signed connection tokens.</li> <li>Broadcast helpers in <code>app/WebSocket/Broadcaster.php</code> for fan-out to rooms and   presence channels.</li> <li>A TypeScript demo client (under <code>resources/client/</code>) showcasing connection   lifecycle, ping/pong handling, and fallback to HTTP polling.</li> <li>Metrics collectors reporting connected clients, message throughput, and error   rates to the shared Prometheus exporter.</li> </ul>"},{"location":"starters/#configuration-notes_2","title":"Configuration notes","text":"<ul> <li>WebSocket server \u2013 configure bind address, port, SSL certificates, and task   worker counts in <code>etc/ws.php</code>. Production deployments typically listen on a   Unix socket or private interface and sit behind a TLS-terminating proxy.</li> <li>HTTP server bridge \u2013 ensure <code>etc/server.php['dispatch_mode']</code> is set to   <code>3</code> (queue) when co-hosting HTTP and WebSocket servers on the same instance so   task workers are not starved.</li> <li>Authentication \u2013 update <code>etc/auth.php</code> to match the token issuing strategy   used by your REST API. The starter provides hooks for signed JWTs and HMAC   tokens. Rotate secrets through <code>.env</code>.</li> <li>Broadcast driver \u2013 configure Redis Pub/Sub under <code>etc/redis.php['pubsub']</code>   so multiple gateway replicas stay in sync. Alternative drivers (Kafka, NATS)   can be registered by binding a custom broadcaster into the service container.</li> </ul>"},{"location":"starters/#operational-workflow_2","title":"Operational workflow","text":"<ul> <li>Start the gateway with <code>php bin/bamboo ws.serve</code>. The command reads host and   port settings from <code>etc/ws.php</code> and logs connection lifecycle events.</li> <li>Optionally run the HTTP server simultaneously (<code>php bin/bamboo http.serve</code>) to   serve REST endpoints and token negotiation routes. Bind to different ports or   use Unix sockets when running both on one machine.</li> <li>Execute the bundled smoke test: <code>npm install &amp;&amp; npm run dev:ws</code> in   <code>resources/client/</code> to connect to the gateway, exchange messages, and exercise   authentication flows.</li> <li>Use <code>composer test</code> to run the WebSocket-specific unit tests covering channel   authorisation and broadcaster fan-out logic.</li> <li>Validate graceful shutdown by sending <code>SIGTERM</code> to the worker process and   observing that the server stops accepting new connections while draining active   clients.</li> </ul>"},{"location":"starters/#production-checklist_2","title":"Production checklist","text":"<ul> <li>Terminate TLS at a reverse proxy that supports WebSocket upgrades (NGINX,   HAProxy, or Traefik) and forward connections to the OpenSwoole server over a   persistent upstream.</li> <li>Enable Prometheus metrics by setting <code>METRICS_ENABLED=true</code> in <code>.env</code> and   configuring scrape targets for the gateway instances.</li> <li>Scale horizontally by running multiple <code>ws.serve</code> processes behind the proxy   and enabling Redis Pub/Sub broadcasting to keep channels coherent.</li> <li>Configure automatic restarts with systemd, Supervisor, or Kubernetes Deployments   and use readiness probes that validate the <code>/ops/ws-health</code> endpoint the   starter exposes.</li> </ul>"},{"location":"starters/#publishing-checklist","title":"Publishing checklist","text":"<p>Use this checklist when cutting a release or updating starter documentation:</p> <ol> <li>Documentation parity \u2013 ensure this guide and the individual starter    <code>README.md</code> files match the behaviour of the published templates. Run each    <code>composer create-project</code> command in a clean directory at least once per    release to confirm installation succeeds without interaction.</li> <li>MkDocs integration \u2013 add each starter guide to the site navigation in    <code>mkdocs.yml</code> (under a \"Starters\" section) and enable collections so MkDocs    renders cards or feature grids on the landing page. Verify <code>mkdocs serve</code> and    <code>mkdocs build --strict</code> both succeed locally.</li> <li>Static-site deployment \u2013 update Netlify, GitHub Pages, or the chosen host    to trigger builds from the default branch. Provide the <code>pip install -r    docs/requirements.txt</code> step (or inline dependency list) so the build image has    MkDocs and theme plugins available.</li> <li>Automation \u2013 wire smoke tests into CI that execute the <code>create-project</code>    commands using Composer's <code>--no-interaction</code> flag. Cache Composer downloads to    keep pipelines fast and surface template breakage immediately.</li> <li>Support rotation \u2013 record starter-specific issues in the main issue    tracker using the <code>starter</code> label. Publish FAQs and troubleshooting tips as    they emerge so teams integrating the starters have quick answers.</li> </ol>"},{"location":"tasks/","title":"v1.0 Release Task Stubs","text":"<p>These task stubs capture the remaining work required to close out the unchecked items in <code>docs/roadmap/v1.0-prep.md</code>. Each stub includes background context, deliverables, and suggested next steps so they can be promoted to full issues or assigned to an owner without re-triaging the roadmap.</p>"},{"location":"tasks/#open-stubs","title":"Open stubs","text":"<ul> <li>Integrate the configuration validator with CI</li> <li>Document the configuration deprecation policy</li> <li>Publish the inaugural benchmark dataset</li> </ul>"},{"location":"tasks/#v10-release-task-stubs_1","title":"v1.0 Release Task Stubs","text":"<p>These task stubs capture the remaining work required to close out the unchecked items in <code>docs/roadmap/v1.0-prep.md</code>. Each stub includes background context, deliverables, and suggested next steps so they can be promoted to full issues or assigned to an owner without re-triaging the roadmap.</p>"},{"location":"tasks/#open-stubs_1","title":"Open stubs","text":"<ul> <li>Integrate the configuration validator with CI</li> <li>Document the configuration deprecation policy</li> <li>Publish the inaugural benchmark dataset</li> </ul>"},{"location":"tasks/benchmarks-baseline-dataset/","title":"Task Stub: Publish the inaugural benchmark dataset","text":""},{"location":"tasks/benchmarks-baseline-dataset/#summary","title":"Summary","text":"<p>Capture and commit the first cold-cache HTTP benchmark run required for the v1.0 release announcement. The goal is to execute the maintained harness, document hardware/runtime metadata, and store the CSV + notes under <code>docs/benchmarks/</code> so charts can be generated for release materials.</p>"},{"location":"tasks/benchmarks-baseline-dataset/#background","title":"Background","text":"<ul> <li><code>docs/roadmap/v1.0-prep.md</code> calls for scheduling the   initial benchmark run and landing the resulting dataset under   <code>docs/benchmarks/data/</code>.</li> <li>The benchmarking harness and workflow are documented in   <code>docs/benchmarks/README.md</code>, but the <code>data/</code>   directory is currently empty.</li> <li>Publishing the dataset unblocks chart generation via   <code>docs/tools/plot-bench.py</code> and lets the announcement cite reproducible numbers.</li> </ul>"},{"location":"tasks/benchmarks-baseline-dataset/#definition-of-done","title":"Definition of done","text":"<ul> <li>[ ] At least one CSV capturing the baseline run (with label, concurrency,       throughput, latency percentiles) lives in <code>docs/benchmarks/data/</code>.</li> <li>[ ] A companion Markdown or YAML metadata file records hardware specs, OS,       PHP/OpenSwoole versions, git commit hash, and any notable tuning.</li> <li>[ ] <code>docs/benchmarks/README.md</code> references the new dataset and, if necessary,       notes any deviations from the default workflow.</li> <li>[ ] Optional: throughput/latency charts regenerated to confirm the dataset is       compatible with the plotting tool.</li> </ul>"},{"location":"tasks/benchmarks-baseline-dataset/#suggested-implementation","title":"Suggested implementation","text":"<ol> <li>Provision or schedule dedicated hardware that mirrors the target production    baseline. Document CPU, RAM, kernel, and network configuration.</li> <li>Deploy Bamboo at the latest commit intended for the v1.0 release and warm the    application per the playbook instructions.</li> <li>Execute <code>php bin/bench/http</code> with the agreed concurrency/duration settings and    capture the CSV output inside <code>docs/benchmarks/data/</code> (e.g.    <code>20240520-baseline.csv</code>).</li> <li>Write a metadata note (e.g. <code>20240520-baseline.md</code>) capturing environment    details and relevant command invocations.</li> <li>Optionally run <code>python3 docs/tools/plot-bench.py docs/benchmarks/data</code> to    regenerate charts and confirm there are no parser regressions.</li> <li>Commit the new artefacts and update the roadmap checklist once merged.</li> </ol>"},{"location":"tasks/benchmarks-baseline-dataset/#references","title":"References","text":"<ul> <li>Benchmark workflow: <code>docs/benchmarks/README.md</code></li> <li>Data storage location: <code>docs/benchmarks/data/</code></li> <li>Plotting tool: <code>docs/tools/plot-bench.py</code></li> <li>Roadmap tracker: <code>docs/roadmap/v1.0-prep.md</code></li> </ul>"},{"location":"tasks/benchmarks-baseline-dataset/#task-stub-publish-the-inaugural-benchmark-dataset_1","title":"Task Stub: Publish the inaugural benchmark dataset","text":""},{"location":"tasks/benchmarks-baseline-dataset/#summary_1","title":"Summary","text":"<p>Capture and commit the first cold-cache HTTP benchmark run required for the v1.0 release announcement. The goal is to execute the maintained harness, document hardware/runtime metadata, and store the CSV + notes under <code>docs/benchmarks/</code> so charts can be generated for release materials.</p>"},{"location":"tasks/benchmarks-baseline-dataset/#background_1","title":"Background","text":"<ul> <li><code>docs/roadmap/v1.0-prep.md</code> calls for scheduling the   initial benchmark run and landing the resulting dataset under   <code>docs/benchmarks/data/</code>.</li> <li>The benchmarking harness and workflow are documented in   <code>docs/benchmarks/README.md</code>, but the <code>data/</code>   directory is currently empty.</li> <li>Publishing the dataset unblocks chart generation via   <code>docs/tools/plot-bench.py</code> and lets the announcement cite reproducible numbers.</li> </ul>"},{"location":"tasks/benchmarks-baseline-dataset/#definition-of-done_1","title":"Definition of done","text":"<ul> <li>[ ] At least one CSV capturing the baseline run (with label, concurrency,       throughput, latency percentiles) lives in <code>docs/benchmarks/data/</code>.</li> <li>[ ] A companion Markdown or YAML metadata file records hardware specs, OS,       PHP/OpenSwoole versions, git commit hash, and any notable tuning.</li> <li>[ ] <code>docs/benchmarks/README.md</code> references the new dataset and, if necessary,       notes any deviations from the default workflow.</li> <li>[ ] Optional: throughput/latency charts regenerated to confirm the dataset is       compatible with the plotting tool.</li> </ul>"},{"location":"tasks/benchmarks-baseline-dataset/#suggested-implementation_1","title":"Suggested implementation","text":"<ol> <li>Provision or schedule dedicated hardware that mirrors the target production    baseline. Document CPU, RAM, kernel, and network configuration.</li> <li>Deploy Bamboo at the latest commit intended for the v1.0 release and warm the    application per the playbook instructions.</li> <li>Execute <code>php bin/bench/http</code> with the agreed concurrency/duration settings and    capture the CSV output inside <code>docs/benchmarks/data/</code> (e.g.    <code>20240520-baseline.csv</code>).</li> <li>Write a metadata note (e.g. <code>20240520-baseline.md</code>) capturing environment    details and relevant command invocations.</li> <li>Optionally run <code>python3 docs/tools/plot-bench.py docs/benchmarks/data</code> to    regenerate charts and confirm there are no parser regressions.</li> <li>Commit the new artefacts and update the roadmap checklist once merged.</li> </ol>"},{"location":"tasks/benchmarks-baseline-dataset/#references_1","title":"References","text":"<ul> <li>Benchmark workflow: <code>docs/benchmarks/README.md</code></li> <li>Data storage location: <code>docs/benchmarks/data/</code></li> <li>Plotting tool: <code>docs/tools/plot-bench.py</code></li> <li>Roadmap tracker: <code>docs/roadmap/v1.0-prep.md</code></li> </ul>"},{"location":"tasks/config-validation-ci/","title":"Task Stub: Integrate the configuration validator with CI","text":""},{"location":"tasks/config-validation-ci/#summary","title":"Summary","text":"<p>Wire the <code>composer validate:config</code> script into the automated pipelines so configuration regressions are caught during pull requests and nightly runs. The script proxies to <code>php bin/bamboo config.validate</code>, and CI now runs it for every matrix job to keep the validator active.</p>"},{"location":"tasks/config-validation-ci/#background","title":"Background","text":"<ul> <li><code>docs/roadmap/v1.0-prep.md</code> tracks this under the   configuration schema checklist. The main checkbox and the \"Land the Composer   script and CI wiring\" subtask are now complete.</li> <li><code>composer.json</code> exposes the <code>validate:config</code> script   and <code>.github/workflows/ci.yml</code> runs it alongside the existing Composer QA   targets.</li> <li><code>src/Console/Command/ConfigValidate.php</code> implements the validator command and   documents the expected exit codes.</li> </ul>"},{"location":"tasks/config-validation-ci/#definition-of-done","title":"Definition of done","text":"<ul> <li>[x] CI runs <code>composer validate:config</code> on every push and pull request for the       PHP 8.2/8.3/8.4 matrix.</li> <li>[x] The README and contributor docs mention the validator in the local       workflow section (if additional steps are required).</li> <li>[x] A failing configuration causes the CI job to exit non-zero with actionable       logs.</li> </ul>"},{"location":"tasks/config-validation-ci/#suggested-implementation","title":"Suggested implementation","text":"<ol> <li>Add a dedicated step to <code>.github/workflows/ci.yml</code> after Composer installs to    run <code>composer validate:config</code>.</li> <li>Ensure the command uses the repository's Composer wrapper (<code>./bootstrap/shell-init.sh</code>)    or updates PATH as needed.</li> <li>If the validator produces artefacts (logs, reports), upload them on failure    alongside existing PHPUnit caches.</li> <li>Update <code>README.md</code> or other onboarding docs if the local workflow should now    include this script by default.</li> </ol>"},{"location":"tasks/config-validation-ci/#references","title":"References","text":"<ul> <li>Composer script definition: <code>composer.json</code></li> <li>CI pipeline: <code>.github/workflows/ci.yml</code></li> <li>Command implementation: <code>src/Console/Command/ConfigValidate.php</code></li> </ul>"},{"location":"tasks/config-validation-ci/#task-stub-integrate-the-configuration-validator-with-ci_1","title":"Task Stub: Integrate the configuration validator with CI","text":""},{"location":"tasks/config-validation-ci/#summary_1","title":"Summary","text":"<p>Wire the <code>composer validate:config</code> script into the automated pipelines so configuration regressions are caught during pull requests and nightly runs. The script proxies to <code>php bin/bamboo config.validate</code>, and CI now runs it for every matrix job to keep the validator active.</p>"},{"location":"tasks/config-validation-ci/#background_1","title":"Background","text":"<ul> <li><code>docs/roadmap/v1.0-prep.md</code> tracks this under the   configuration schema checklist. The main checkbox and the \"Land the Composer   script and CI wiring\" subtask are now complete.</li> <li><code>composer.json</code> exposes the <code>validate:config</code> script   and <code>.github/workflows/ci.yml</code> runs it alongside the existing Composer QA   targets.</li> <li><code>src/Console/Command/ConfigValidate.php</code> implements the validator command and   documents the expected exit codes.</li> </ul>"},{"location":"tasks/config-validation-ci/#definition-of-done_1","title":"Definition of done","text":"<ul> <li>[x] CI runs <code>composer validate:config</code> on every push and pull request for the       PHP 8.2/8.3/8.4 matrix.</li> <li>[x] The README and contributor docs mention the validator in the local       workflow section (if additional steps are required).</li> <li>[x] A failing configuration causes the CI job to exit non-zero with actionable       logs.</li> </ul>"},{"location":"tasks/config-validation-ci/#suggested-implementation_1","title":"Suggested implementation","text":"<ol> <li>Add a dedicated step to <code>.github/workflows/ci.yml</code> after Composer installs to    run <code>composer validate:config</code>.</li> <li>Ensure the command uses the repository's Composer wrapper (<code>./bootstrap/shell-init.sh</code>)    or updates PATH as needed.</li> <li>If the validator produces artefacts (logs, reports), upload them on failure    alongside existing PHPUnit caches.</li> <li>Update <code>README.md</code> or other onboarding docs if the local workflow should now    include this script by default.</li> </ol>"},{"location":"tasks/config-validation-ci/#references_1","title":"References","text":"<ul> <li>Composer script definition: <code>composer.json</code></li> <li>CI pipeline: <code>.github/workflows/ci.yml</code></li> <li>Command implementation: <code>src/Console/Command/ConfigValidate.php</code></li> </ul>"},{"location":"tasks/upgrade-guide-config-deprecations/","title":"Task Stub: Document the configuration deprecation policy","text":""},{"location":"tasks/upgrade-guide-config-deprecations/#summary","title":"Summary","text":"<p>Extend the v1.0 upgrade guide with a concise configuration deprecation policy so operators understand the compatibility window for renamed keys, removed files, and feature-flagged fallbacks. The configuration reference already outlines the rules, but the upgrade playbook needs to repeat them in a digestible form.</p>"},{"location":"tasks/upgrade-guide-config-deprecations/#background","title":"Background","text":"<ul> <li><code>docs/roadmap/v1.0-prep.md</code> leaves the \"Write the   configuration deprecation policy into the upgrade guide\" checkbox unchecked.</li> <li>The detailed policy lives in   <code>docs/configuration/overview.md</code>   and should be paraphrased for upgrade-focused readers.</li> <li><code>docs/upgrade/v1.0.md</code> currently mentions deprecation handling at a high level   but lacks explicit guidance for configuration changes.</li> </ul>"},{"location":"tasks/upgrade-guide-config-deprecations/#definition-of-done","title":"Definition of done","text":"<ul> <li>[ ] The upgrade guide describes how long deprecated configuration keys remain       supported, how shims are communicated, and when breaking removals occur.</li> <li>[ ] Examples illustrate a typical rename (legacy + new key) and the expected       operator workflow for migrating.</li> <li>[ ] References back to the configuration overview ensure readers can deep-dive       into the canonical tables if needed.</li> </ul>"},{"location":"tasks/upgrade-guide-config-deprecations/#suggested-implementation","title":"Suggested implementation","text":"<ol> <li>Add a new subsection to <code>docs/upgrade/v1.0.md</code> under \"Deprecations\" or create    a dedicated \"Configuration deprecations\" section.</li> <li>Summarise the compatibility window (one minor release), the requirement for    runtime notices, and the expectation to run <code>composer validate:config</code> during    migrations.</li> <li>Include a short code sample or bullet list showing how Bamboo reads both keys    during the grace period.</li> <li>Cross-link the more detailed reference material for readers who need schema    tables or CLI commands.</li> </ol>"},{"location":"tasks/upgrade-guide-config-deprecations/#references","title":"References","text":"<ul> <li>Configuration policy source: <code>docs/configuration/overview.md</code></li> <li>Upgrade guide destination: <code>docs/upgrade/v1.0.md</code></li> <li>Roadmap tracker: <code>docs/roadmap/v1.0-prep.md</code></li> </ul>"},{"location":"tasks/upgrade-guide-config-deprecations/#task-stub-document-the-configuration-deprecation-policy_1","title":"Task Stub: Document the configuration deprecation policy","text":""},{"location":"tasks/upgrade-guide-config-deprecations/#summary_1","title":"Summary","text":"<p>Extend the v1.0 upgrade guide with a concise configuration deprecation policy so operators understand the compatibility window for renamed keys, removed files, and feature-flagged fallbacks. The configuration reference already outlines the rules, but the upgrade playbook needs to repeat them in a digestible form.</p>"},{"location":"tasks/upgrade-guide-config-deprecations/#background_1","title":"Background","text":"<ul> <li><code>docs/roadmap/v1.0-prep.md</code> leaves the \"Write the   configuration deprecation policy into the upgrade guide\" checkbox unchecked.</li> <li>The detailed policy lives in   <code>docs/configuration/overview.md</code>   and should be paraphrased for upgrade-focused readers.</li> <li><code>docs/upgrade/v1.0.md</code> currently mentions deprecation handling at a high level   but lacks explicit guidance for configuration changes.</li> </ul>"},{"location":"tasks/upgrade-guide-config-deprecations/#definition-of-done_1","title":"Definition of done","text":"<ul> <li>[ ] The upgrade guide describes how long deprecated configuration keys remain       supported, how shims are communicated, and when breaking removals occur.</li> <li>[ ] Examples illustrate a typical rename (legacy + new key) and the expected       operator workflow for migrating.</li> <li>[ ] References back to the configuration overview ensure readers can deep-dive       into the canonical tables if needed.</li> </ul>"},{"location":"tasks/upgrade-guide-config-deprecations/#suggested-implementation_1","title":"Suggested implementation","text":"<ol> <li>Add a new subsection to <code>docs/upgrade/v1.0.md</code> under \"Deprecations\" or create    a dedicated \"Configuration deprecations\" section.</li> <li>Summarise the compatibility window (one minor release), the requirement for    runtime notices, and the expectation to run <code>composer validate:config</code> during    migrations.</li> <li>Include a short code sample or bullet list showing how Bamboo reads both keys    during the grace period.</li> <li>Cross-link the more detailed reference material for readers who need schema    tables or CLI commands.</li> </ol>"},{"location":"tasks/upgrade-guide-config-deprecations/#references_1","title":"References","text":"<ul> <li>Configuration policy source: <code>docs/configuration/overview.md</code></li> <li>Upgrade guide destination: <code>docs/upgrade/v1.0.md</code></li> <li>Roadmap tracker: <code>docs/roadmap/v1.0-prep.md</code></li> </ul>"},{"location":"upgrade/v1.0/","title":"Bamboo v1.0 Upgrade Guide","text":"<p>This guide walks 0.x installations through the final steps required to adopt the v1.0 contract freeze. It assumes the application already targets Bamboo v0.4 and OpenSwoole deployments.</p>"},{"location":"upgrade/v1.0/#audience-and-prerequisites","title":"Audience and prerequisites","text":"<ul> <li>Source application currently running on Bamboo <code>^0.4</code>.</li> <li>PHP 8.4 with the cURL, OpenSwoole, and Redis extensions available.</li> <li>Access to the deployment environment to update system packages and restart the   HTTP workers.</li> </ul> <p>Before proceeding, confirm the toolchain versions:</p> <pre><code>php -v\nphp --ri openswoole | grep Version\n</code></pre>"},{"location":"upgrade/v1.0/#step-by-step-upgrade-flow","title":"Step-by-step upgrade flow","text":"<ol> <li>Back up configuration and environment files.</li> <li> <p>Commit local changes or create copies of <code>.env</code> and the <code>etc/</code> directory.</p> </li> <li> <p>Update Composer dependencies.</p> </li> <li>Bump Bamboo to the v1.0 constraint: <code>composer require greenarmor/bamboo:^1.0</code>.</li> <li> <p>Run <code>composer install</code> to download updated packages.</p> </li> <li> <p>Run configuration validation.</p> </li> <li>Execute <code>composer validate:config</code> to run the new <code>config.validate</code> command.</li> <li> <p>Address reported issues (missing keys, empty secrets, invalid timeouts) before      continuing.</p> </li> <li> <p>Adopt new configuration files.</p> </li> <li>Copy <code>etc/resilience.php</code> and merge any project-specific overrides. This file      defines timeout and circuit breaker defaults consumed by the new middleware.</li> <li> <p>Ensure <code>etc/middleware.php</code> contains      <code>Bamboo\\Web\\Middleware\\CircuitBreakerMiddleware::class</code> and      <code>Bamboo\\Web\\Middleware\\TimeoutMiddleware::class</code> in the global stack. Custom      configurations should merge these entries into their own arrays.</p> </li> <li> <p>Review module bootstrapping.</p> </li> <li> <p>Applications relying on modules must update <code>etc/modules.php</code> to include      module classes explicitly; v1.0 treats module order as part of the public      contract documented in <code>docs/modules.md</code>.</p> </li> <li> <p>Refresh the route cache (if used).</p> </li> <li> <p>Run <code>php bin/bamboo routes.cache</code> after the application boots locally to      regenerate <code>var/cache/routes.cache.php</code> without closures.</p> </li> <li> <p>Validate operational scripts.</p> </li> <li>Update CI pipelines to call <code>composer validate:config</code> alongside linting and      tests.</li> <li> <p>Add <code>php bin/bench/http --label=\"pre-release\"</code> to capture baseline numbers      for regression monitoring.</p> </li> <li> <p>Smoke-test the application.</p> </li> <li><code>php bin/bamboo http.serve</code> locally; verify <code>/</code>, <code>/metrics</code>, <code>/healthz</code>, and      <code>/readyz</code> respond as expected.</li> <li> <p>Run the integration test suite (<code>composer test</code>).</p> </li> <li> <p>Deploy.</p> </li> <li>Publish the updated Docker image or artefact.</li> <li>Monitor <code>/metrics</code> and the new circuit breaker metrics for anomalies during      the first traffic window.</li> </ol>"},{"location":"upgrade/v1.0/#compatibility-matrix","title":"Compatibility matrix","text":"Component Supported versions PHP 8.4.x OpenSwoole 22.1 or newer (built with coroutine and HTTP/WS support) Redis 6.x or newer Prometheus client <code>promphp/prometheus_client_php</code> ^2.7"},{"location":"upgrade/v1.0/#configuration-deprecation-policy","title":"Configuration deprecation policy","text":"<p>Configuration keys and files under <code>etc/</code> participate in the v1.x compatibility promise. When schema changes are necessary:</p> <ul> <li>Deprecated keys remain functional for at least one minor release (e.g. a key   marked in v1.2 continues working through v1.3). During the window Bamboo emits   <code>E_USER_DEPRECATED</code> notices whenever the legacy key is read and highlights the   pending removal in the release notes.</li> <li>Replacement keys must be documented in both the configuration reference and   release notes. Maintain fallbacks that read from both keys until the grace   period expires.</li> <li>Run <code>composer validate:config</code> after updating Bamboo; the validator reports   missing keys, empty secrets, and other drift before the configuration ships to   production.</li> </ul>"},{"location":"upgrade/v1.0/#example-rename-workflow","title":"Example rename workflow","text":"<p>When <code>etc/http.php</code> renames <code>timeouts.default</code> to <code>timeouts.client_default</code>:</p> <ol> <li>Ship Bamboo v1.2 with support for both keys:</li> </ol> <pre><code>$httpConfig = $config-&gt;get('http');\n\n$defaultTimeout = $httpConfig['timeouts']['client_default']\n    ?? $httpConfig['timeouts']['default']\n    ?? 3.0;\n</code></pre> <p>Accessing <code>timeouts.default</code> triggers a deprecation notice.</p> <p>(In this example <code>$config</code> is the injected <code>Bamboo\\Core\\Config</code> service.)</p> <ol> <li>Document the rename in the release notes and update    <code>docs/configuration/overview.md</code> so operators    see the new key alongside the migration guidance.</li> <li>Encourage users to run <code>composer validate:config</code> after updating their    configuration files; the validator warns when only the deprecated key is    present.</li> <li>Remove the fallback in v1.4 once the grace period expires.</li> </ol> <p>This policy keeps configuration migrations predictable while ensuring operators have clear tooling and documentation for the change window. Refer to the configuration overview for the canonical schema tables and additional examples.</p>"},{"location":"upgrade/v1.0/#deprecations-lifted-in-v10","title":"Deprecations lifted in v1.0","text":"<p>No runtime deprecations remained pending for v1.0. The release formalises the configuration schema, router behaviour, and CLI command catalogue introduced throughout the 0.4 series. Future deprecations will be announced with warning emissions, upgrade notes, and automated tooling per the policies captured in the CLI and configuration references.</p>"},{"location":"upgrade/v1.0/#additional-resources","title":"Additional resources","text":"<ul> <li>CLI reference</li> <li>Router contract</li> <li>Configuration overview</li> <li>Performance benchmark playbook</li> <li>Starter blueprint hub</li> </ul> <p>For further assistance, open a discussion on the project repository or join the community chat linked from the README.</p>"}]}